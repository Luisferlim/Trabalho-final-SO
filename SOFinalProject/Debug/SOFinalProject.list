
SOFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000956c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800970c  0800970c  0001970c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c4  080097c4  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097cc  080097cc  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  080097d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d88  20000160  08009934  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee8  08009934  00021ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150e9  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b3  00000000  00000000  00035279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00038730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  000396e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a427  00000000  00000000  0003a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015547  00000000  00000000  0005496f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095fb1  00000000  00000000  00069eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffe67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f0  00000000  00000000  000ffeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080096f4 	.word	0x080096f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	080096f4 	.word	0x080096f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <media_movel>:
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
uint16_t media_movel(uint16_t *buffer);

/* Média móvel */
uint16_t media_movel(uint16_t *buffer) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    uint32_t soma = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	e00b      	b.n	80005be <media_movel+0x2a>
        soma += buffer[i];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	4413      	add	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b09      	cmp	r3, #9
 80005c2:	ddf0      	ble.n	80005a6 <media_movel+0x12>
    }
    return soma / BUFFER_SIZE;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a05      	ldr	r2, [pc, #20]	; (80005dc <media_movel+0x48>)
 80005c8:	fba2 2303 	umull	r2, r3, r2, r3
 80005cc:	08db      	lsrs	r3, r3, #3
 80005ce:	b29b      	uxth	r3, r3
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	cccccccd 	.word	0xcccccccd

080005e0 <HAL_ADC_ConvCpltCallback>:

/* Callback do ADC DMA */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a05      	ldr	r2, [pc, #20]	; (8000604 <HAL_ADC_ConvCpltCallback+0x24>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d102      	bne.n	80005f8 <HAL_ADC_ConvCpltCallback+0x18>
        convCompleted = 1;
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_ADC_ConvCpltCallback+0x28>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
    }
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40012000 	.word	0x40012000
 8000608:	200002c2 	.word	0x200002c2

0800060c <main>:

/* MAIN */
int main(void) {
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	b099      	sub	sp, #100	; 0x64
 8000610:	af04      	add	r7, sp, #16
    HAL_Init();
 8000612:	f000 fc01 	bl	8000e18 <HAL_Init>
    SystemClock_Config();
 8000616:	f000 f8d1 	bl	80007bc <SystemClock_Config>
    MX_GPIO_Init();
 800061a:	f000 f9d3 	bl	80009c4 <MX_GPIO_Init>
    MX_DMA_Init();
 800061e:	f000 f9b1 	bl	8000984 <MX_DMA_Init>
    MX_ADC1_Init();
 8000622:	f000 f929 	bl	8000878 <MX_ADC1_Init>
    MX_USART2_UART_Init();
 8000626:	f000 f989 	bl	800093c <MX_USART2_UART_Init>
    MX_USB_DEVICE_Init();
 800062a:	f007 feb3 	bl	8008394 <MX_USB_DEVICE_Init>

    char Buffer[64];

    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)raw, 4);
 800062e:	2204      	movs	r2, #4
 8000630:	4956      	ldr	r1, [pc, #344]	; (800078c <main+0x180>)
 8000632:	4857      	ldr	r0, [pc, #348]	; (8000790 <main+0x184>)
 8000634:	f000 fdda 	bl	80011ec <HAL_ADC_Start_DMA>

    while (1) {
        if (convCompleted) {
 8000638:	4b56      	ldr	r3, [pc, #344]	; (8000794 <main+0x188>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0fb      	beq.n	8000638 <main+0x2c>
            convCompleted = 0;
 8000640:	4b54      	ldr	r3, [pc, #336]	; (8000794 <main+0x188>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]

            buffer1[bufferIndex] = raw[0];
 8000646:	4b54      	ldr	r3, [pc, #336]	; (8000798 <main+0x18c>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4b4f      	ldr	r3, [pc, #316]	; (800078c <main+0x180>)
 800064e:	8819      	ldrh	r1, [r3, #0]
 8000650:	4b52      	ldr	r3, [pc, #328]	; (800079c <main+0x190>)
 8000652:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            buffer2[bufferIndex] = raw[1];
 8000656:	4b50      	ldr	r3, [pc, #320]	; (8000798 <main+0x18c>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	4b4b      	ldr	r3, [pc, #300]	; (800078c <main+0x180>)
 800065e:	8859      	ldrh	r1, [r3, #2]
 8000660:	4b4f      	ldr	r3, [pc, #316]	; (80007a0 <main+0x194>)
 8000662:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            buffer3[bufferIndex] = raw[2];
 8000666:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <main+0x18c>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	4b47      	ldr	r3, [pc, #284]	; (800078c <main+0x180>)
 800066e:	8899      	ldrh	r1, [r3, #4]
 8000670:	4b4c      	ldr	r3, [pc, #304]	; (80007a4 <main+0x198>)
 8000672:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            buffer4[bufferIndex] = raw[3];
 8000676:	4b48      	ldr	r3, [pc, #288]	; (8000798 <main+0x18c>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	4b43      	ldr	r3, [pc, #268]	; (800078c <main+0x180>)
 800067e:	88d9      	ldrh	r1, [r3, #6]
 8000680:	4b49      	ldr	r3, [pc, #292]	; (80007a8 <main+0x19c>)
 8000682:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            bufferIndex = (bufferIndex + 1) % BUFFER_SIZE;
 8000686:	4b44      	ldr	r3, [pc, #272]	; (8000798 <main+0x18c>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	4b47      	ldr	r3, [pc, #284]	; (80007ac <main+0x1a0>)
 800068e:	fb83 1302 	smull	r1, r3, r3, r2
 8000692:	1099      	asrs	r1, r3, #2
 8000694:	17d3      	asrs	r3, r2, #31
 8000696:	1ac9      	subs	r1, r1, r3
 8000698:	460b      	mov	r3, r1
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	440b      	add	r3, r1
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	1ad1      	subs	r1, r2, r3
 80006a2:	b28a      	uxth	r2, r1
 80006a4:	4b3c      	ldr	r3, [pc, #240]	; (8000798 <main+0x18c>)
 80006a6:	801a      	strh	r2, [r3, #0]

            uint8_t btn1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 80006a8:	2102      	movs	r1, #2
 80006aa:	4841      	ldr	r0, [pc, #260]	; (80007b0 <main+0x1a4>)
 80006ac:	f001 ff6c 	bl	8002588 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            uint8_t btn2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80006b6:	2101      	movs	r1, #1
 80006b8:	483d      	ldr	r0, [pc, #244]	; (80007b0 <main+0x1a4>)
 80006ba:	f001 ff65 	bl	8002588 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            //aqui invertemos a logica para os botoes
            btn1 = !btn1;
 80006c4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf0c      	ite	eq
 80006cc:	2301      	moveq	r3, #1
 80006ce:	2300      	movne	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            btn2 = !btn2;
 80006d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf0c      	ite	eq
 80006de:	2301      	moveq	r3, #1
 80006e0:	2300      	movne	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            //gambiarra, nao reproduzir em casa
            if (btn1 == 1) {
 80006e8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d102      	bne.n	80006f6 <main+0xea>
                btn2 = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }

            uint16_t pot1 = media_movel(buffer1);
 80006f6:	4829      	ldr	r0, [pc, #164]	; (800079c <main+0x190>)
 80006f8:	f7ff ff4c 	bl	8000594 <media_movel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            uint16_t pot2 = media_movel(buffer2);
 8000702:	4827      	ldr	r0, [pc, #156]	; (80007a0 <main+0x194>)
 8000704:	f7ff ff46 	bl	8000594 <media_movel>
 8000708:	4603      	mov	r3, r0
 800070a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
            uint16_t pot3 = media_movel(buffer3);
 800070e:	4825      	ldr	r0, [pc, #148]	; (80007a4 <main+0x198>)
 8000710:	f7ff ff40 	bl	8000594 <media_movel>
 8000714:	4603      	mov	r3, r0
 8000716:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            uint16_t pot4 = media_movel(buffer4);
 800071a:	4823      	ldr	r0, [pc, #140]	; (80007a8 <main+0x19c>)
 800071c:	f7ff ff3a 	bl	8000594 <media_movel>
 8000720:	4603      	mov	r3, r0
 8000722:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

            // Envio via UART
            sprintf(Buffer, "aX:%4d aY:%4d bX:%4d bY:%4d | BTN1:%d BTN2:%d\r\n", pot1, pot2, pot3, pot4, btn1, btn2);
 8000726:	f8b7 504c 	ldrh.w	r5, [r7, #76]	; 0x4c
 800072a:	f8b7 604a 	ldrh.w	r6, [r7, #74]	; 0x4a
 800072e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000732:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000736:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
 800073a:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800073e:	1d3c      	adds	r4, r7, #4
 8000740:	9003      	str	r0, [sp, #12]
 8000742:	9102      	str	r1, [sp, #8]
 8000744:	9201      	str	r2, [sp, #4]
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	4633      	mov	r3, r6
 800074a:	462a      	mov	r2, r5
 800074c:	4919      	ldr	r1, [pc, #100]	; (80007b4 <main+0x1a8>)
 800074e:	4620      	mov	r0, r4
 8000750:	f008 fb62 	bl	8008e18 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)Buffer, strlen(Buffer), 100);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd42 	bl	80001e0 <strlen>
 800075c:	4603      	mov	r3, r0
 800075e:	b29a      	uxth	r2, r3
 8000760:	1d39      	adds	r1, r7, #4
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	4814      	ldr	r0, [pc, #80]	; (80007b8 <main+0x1ac>)
 8000766:	f003 fe8a 	bl	800447e <HAL_UART_Transmit>
            CDC_Transmit_FS((uint8_t*) Buffer, strlen(Buffer));
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fd37 	bl	80001e0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f007 fec8 	bl	8008510 <CDC_Transmit_FS>
            HAL_ADC_Start_DMA(&hadc1, (uint32_t*)raw, 4);
 8000780:	2204      	movs	r2, #4
 8000782:	4902      	ldr	r1, [pc, #8]	; (800078c <main+0x180>)
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <main+0x184>)
 8000786:	f000 fd31 	bl	80011ec <HAL_ADC_Start_DMA>
        if (convCompleted) {
 800078a:	e755      	b.n	8000638 <main+0x2c>
 800078c:	200002b8 	.word	0x200002b8
 8000790:	2000017c 	.word	0x2000017c
 8000794:	200002c2 	.word	0x200002c2
 8000798:	200002c0 	.word	0x200002c0
 800079c:	20000268 	.word	0x20000268
 80007a0:	2000027c 	.word	0x2000027c
 80007a4:	20000290 	.word	0x20000290
 80007a8:	200002a4 	.word	0x200002a4
 80007ac:	66666667 	.word	0x66666667
 80007b0:	40020800 	.word	0x40020800
 80007b4:	0800970c 	.word	0x0800970c
 80007b8:	20000224 	.word	0x20000224

080007bc <SystemClock_Config>:

    }
}

/* CLOCK CONFIG */
void SystemClock_Config(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	; 0x50
 80007c0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2230      	movs	r2, #48	; 0x30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f008 fb1c 	bl	8008e08 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <SystemClock_Config+0xb4>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <SystemClock_Config+0xb4>)
 80007ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ee:	6413      	str	r3, [r2, #64]	; 0x40
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <SystemClock_Config+0xb4>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <SystemClock_Config+0xb8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <SystemClock_Config+0xb8>)
 8000806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <SystemClock_Config+0xb8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800081c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 8000830:	2360      	movs	r3, #96	; 0x60
 8000832:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	4618      	mov	r0, r3
 8000842:	f003 f937 	bl	8003ab4 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fb9f 	bl	8003fa4 <HAL_RCC_ClockConfig>
}
 8000866:	bf00      	nop
 8000868:	3750      	adds	r7, #80	; 0x50
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <MX_ADC1_Init>:

/* ADC CONFIG - 12 BITS */
static void MX_ADC1_Init(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
    hadc1.Instance = ADC1;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_ADC1_Init+0xb8>)
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <MX_ADC1_Init+0xbc>)
 800088e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_ADC1_Init+0xb8>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B; // <--- RESOLUÇÃO 12 BITS
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_ADC1_Init+0xb8>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_ADC1_Init+0xb8>)
 800089e:	2201      	movs	r2, #1
 80008a0:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_ADC1_Init+0xb8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC1_Init+0xb8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ADC1_Init+0xb8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_ADC1_Init+0xb8>)
 80008b8:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <MX_ADC1_Init+0xc0>)
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ADC1_Init+0xb8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 4;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_ADC1_Init+0xb8>)
 80008c4:	2204      	movs	r2, #4
 80008c6:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = ENABLE;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ADC1_Init+0xb8>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ADC1_Init+0xb8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
    HAL_ADC_Init(&hadc1);
 80008d6:	4816      	ldr	r0, [pc, #88]	; (8000930 <MX_ADC1_Init+0xb8>)
 80008d8:	f000 fb34 	bl	8000f44 <HAL_ADC_Init>

    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80008dc:	2307      	movs	r3, #7
 80008de:	60bb      	str	r3, [r7, #8]

    sConfig.Channel = ADC_CHANNEL_0; sConfig.Rank = 1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	2301      	movs	r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <MX_ADC1_Init+0xb8>)
 80008ee:	f000 fd8b 	bl	8001408 <HAL_ADC_ConfigChannel>

    sConfig.Channel = ADC_CHANNEL_1; sConfig.Rank = 2;
 80008f2:	2301      	movs	r3, #1
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	2302      	movs	r3, #2
 80008f8:	607b      	str	r3, [r7, #4]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_ADC1_Init+0xb8>)
 8000900:	f000 fd82 	bl	8001408 <HAL_ADC_ConfigChannel>

    sConfig.Channel = ADC_CHANNEL_4; sConfig.Rank = 3;
 8000904:	2304      	movs	r3, #4
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	2303      	movs	r3, #3
 800090a:	607b      	str	r3, [r7, #4]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800090c:	463b      	mov	r3, r7
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_ADC1_Init+0xb8>)
 8000912:	f000 fd79 	bl	8001408 <HAL_ADC_ConfigChannel>

    sConfig.Channel = ADC_CHANNEL_8; sConfig.Rank = 4;
 8000916:	2308      	movs	r3, #8
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	2304      	movs	r3, #4
 800091c:	607b      	str	r3, [r7, #4]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_ADC1_Init+0xb8>)
 8000924:	f000 fd70 	bl	8001408 <HAL_ADC_ConfigChannel>
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000017c 	.word	0x2000017c
 8000934:	40012000 	.word	0x40012000
 8000938:	0f000001 	.word	0x0f000001

0800093c <MX_USART2_UART_Init>:

/* UART2 CONFIG - PA2 (TX), PA3 (RX) */
static void MX_USART2_UART_Init(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART2_UART_Init+0x40>)
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <MX_USART2_UART_Init+0x44>)
 8000944:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <MX_USART2_UART_Init+0x40>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART2_UART_Init+0x40>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART2_UART_Init+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART2_UART_Init+0x40>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART2_UART_Init+0x40>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <MX_USART2_UART_Init+0x40>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <MX_USART2_UART_Init+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 8000972:	4802      	ldr	r0, [pc, #8]	; (800097c <MX_USART2_UART_Init+0x40>)
 8000974:	f003 fd36 	bl	80043e4 <HAL_UART_Init>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000224 	.word	0x20000224
 8000980:	40004400 	.word	0x40004400

08000984 <MX_DMA_Init>:

/* DMA CONFIG */
static void MX_DMA_Init(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA2_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_DMA_Init+0x3c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <MX_DMA_Init+0x3c>)
 8000994:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_DMA_Init+0x3c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2038      	movs	r0, #56	; 0x38
 80009ac:	f001 f8c1 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009b0:	2038      	movs	r0, #56	; 0x38
 80009b2:	f001 f8da 	bl	8001b6a <HAL_NVIC_EnableIRQ>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <MX_GPIO_Init>:

/* GPIO CONFIG */
static void MX_GPIO_Init(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

	 __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
	 // Configura PA4 e PA5 como entrada com pull-up (botões)
	 GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	617b      	str	r3, [r7, #20]
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
	 GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
	 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_GPIO_Init+0xac>)
 8000a5e:	f001 fc0f 	bl	8002280 <HAL_GPIO_Init>
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020800 	.word	0x40020800

08000a74 <Error_Handler>:

/* ERRO */
void Error_Handler(void) {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
    __disable_irq();
    while (1) {}
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_MspInit+0x58>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <HAL_MspInit+0x58>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_MspInit+0x58>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x58>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <HAL_MspInit+0x58>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x58>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000abe:	2007      	movs	r0, #7
 8000ac0:	f001 f82c 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 1);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f06f 0001 	mvn.w	r0, #1
 8000acc:	f001 f831 	bl	8001b32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a40      	ldr	r2, [pc, #256]	; (8000bfc <HAL_ADC_MspInit+0x120>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d179      	bne.n	8000bf2 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <HAL_ADC_MspInit+0x124>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a3e      	ldr	r2, [pc, #248]	; (8000c00 <HAL_ADC_MspInit+0x124>)
 8000b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <HAL_ADC_MspInit+0x124>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <HAL_ADC_MspInit+0x124>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a37      	ldr	r2, [pc, #220]	; (8000c00 <HAL_ADC_MspInit+0x124>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <HAL_ADC_MspInit+0x124>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <HAL_ADC_MspInit+0x124>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <HAL_ADC_MspInit+0x124>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <HAL_ADC_MspInit+0x124>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Ax_Pin|Ay_Pin|Bx_Pin;
 8000b52:	2313      	movs	r3, #19
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4827      	ldr	r0, [pc, #156]	; (8000c04 <HAL_ADC_MspInit+0x128>)
 8000b66:	f001 fb8b 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = By_Pin;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(By_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4822      	ldr	r0, [pc, #136]	; (8000c08 <HAL_ADC_MspInit+0x12c>)
 8000b7e:	f001 fb7f 	bl	8002280 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000b84:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <HAL_ADC_MspInit+0x134>)
 8000b86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bc6:	4811      	ldr	r0, [pc, #68]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000bc8:	f000 ffea 	bl	8001ba0 <HAL_DMA_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000bd2:	f7ff ff4f 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a0c      	ldr	r2, [pc, #48]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000bda:	639a      	str	r2, [r3, #56]	; 0x38
 8000bdc:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <HAL_ADC_MspInit+0x130>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2012      	movs	r0, #18
 8000be8:	f000 ffa3 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000bec:	2012      	movs	r0, #18
 8000bee:	f000 ffbc 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40012000 	.word	0x40012000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	200001c4 	.word	0x200001c4
 8000c10:	40026410 	.word	0x40026410

08000c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12b      	bne.n	8000c8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_UART_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c6e:	230c      	movs	r3, #12
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_UART_MspInit+0x8c>)
 8000c8a:	f001 faf9 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40004400 	.word	0x40004400
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 f8e4 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <ADC_IRQHandler+0x10>)
 8000cfe:	f000 f964 	bl	8000fca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000017c 	.word	0x2000017c

08000d0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <DMA2_Stream0_IRQHandler+0x10>)
 8000d12:	f001 f84b 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001c4 	.word	0x200001c4

08000d20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <OTG_FS_IRQHandler+0x10>)
 8000d26:	f001 fd97 	bl	8002858 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200017ac 	.word	0x200017ac

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f008 f826 	bl	8008db4 <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20020000 	.word	0x20020000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200002c4 	.word	0x200002c4
 8000d9c:	20001ee8 	.word	0x20001ee8

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dca:	490e      	ldr	r1, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de0:	4c0b      	ldr	r4, [pc, #44]	; (8000e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dee:	f7ff ffd7 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f007 ffe5 	bl	8008dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fc09 	bl	800060c <main>
  bx  lr    
 8000dfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000e08:	080097d4 	.word	0x080097d4
  ldr r2, =_sbss
 8000e0c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000e10:	20001ee8 	.word	0x20001ee8

08000e14 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <DMA1_Stream0_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <HAL_Init+0x40>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_Init+0x40>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_Init+0x40>)
 8000e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 fe6b 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f000 f808 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff fe18 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023c00 	.word	0x40023c00

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x54>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x58>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fe83 	bl	8001b86 <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 fe4b 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_InitTick+0x5c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	200002c8 	.word	0x200002c8

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200002c8 	.word	0x200002c8

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffde 	bl	8000ee4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008

08000f44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e033      	b.n	8000fc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d109      	bne.n	8000f76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fdba 	bl	8000adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d118      	bne.n	8000fb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f8a:	f023 0302 	bic.w	r3, r3, #2
 8000f8e:	f043 0202 	orr.w	r2, r3, #2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 fb68 	bl	800166c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f023 0303 	bic.w	r3, r3, #3
 8000faa:	f043 0201 	orr.w	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb2:	e001      	b.n	8000fb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d049      	beq.n	8001094 <HAL_ADC_IRQHandler+0xca>
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d046      	beq.n	8001094 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	2b00      	cmp	r3, #0
 8001010:	d105      	bne.n	800101e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d12b      	bne.n	8001084 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001030:	2b00      	cmp	r3, #0
 8001032:	d127      	bne.n	8001084 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800104c:	2b00      	cmp	r3, #0
 800104e:	d119      	bne.n	8001084 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0220 	bic.w	r2, r2, #32
 800105e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d105      	bne.n	8001084 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f043 0201 	orr.w	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff faab 	bl	80005e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f06f 0212 	mvn.w	r2, #18
 8001092:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d057      	beq.n	800115a <HAL_ADC_IRQHandler+0x190>
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d054      	beq.n	800115a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d105      	bne.n	80010c8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d139      	bne.n	800114a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d12b      	bne.n	800114a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d124      	bne.n	800114a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800110a:	2b00      	cmp	r3, #0
 800110c:	d11d      	bne.n	800114a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001112:	2b00      	cmp	r3, #0
 8001114:	d119      	bne.n	800114a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001124:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 fc0c 	bl	8001968 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f06f 020c 	mvn.w	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001168:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d017      	beq.n	80011a0 <HAL_ADC_IRQHandler+0x1d6>
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d014      	beq.n	80011a0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b01      	cmp	r3, #1
 8001182:	d10d      	bne.n	80011a0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f925 	bl	80013e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f06f 0201 	mvn.w	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011ae:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d015      	beq.n	80011e2 <HAL_ADC_IRQHandler+0x218>
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d012      	beq.n	80011e2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	f043 0202 	orr.w	r2, r3, #2
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f06f 0220 	mvn.w	r2, #32
 80011d0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f90e 	bl	80013f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f06f 0220 	mvn.w	r2, #32
 80011e0:	601a      	str	r2, [r3, #0]
  }
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_ADC_Start_DMA+0x1e>
 8001206:	2302      	movs	r3, #2
 8001208:	e0ce      	b.n	80013a8 <HAL_ADC_Start_DMA+0x1bc>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b01      	cmp	r3, #1
 800121e:	d018      	beq.n	8001252 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001230:	4b5f      	ldr	r3, [pc, #380]	; (80013b0 <HAL_ADC_Start_DMA+0x1c4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a5f      	ldr	r2, [pc, #380]	; (80013b4 <HAL_ADC_Start_DMA+0x1c8>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9a      	lsrs	r2, r3, #18
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001244:	e002      	b.n	800124c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	3b01      	subs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f9      	bne.n	8001246 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001260:	d107      	bne.n	8001272 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001270:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	f040 8086 	bne.w	800138e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012c0:	d106      	bne.n	80012d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f023 0206 	bic.w	r2, r3, #6
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
 80012ce:	e002      	b.n	80012d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <HAL_ADC_Start_DMA+0x1cc>)
 80012e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	4a35      	ldr	r2, [pc, #212]	; (80013bc <HAL_ADC_Start_DMA+0x1d0>)
 80012e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	4a34      	ldr	r2, [pc, #208]	; (80013c0 <HAL_ADC_Start_DMA+0x1d4>)
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <HAL_ADC_Start_DMA+0x1d8>)
 80012f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001302:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001312:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001322:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	334c      	adds	r3, #76	; 0x4c
 800132e:	4619      	mov	r1, r3
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f000 fce2 	bl	8001cfc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10f      	bne.n	8001364 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d129      	bne.n	80013a6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	e020      	b.n	80013a6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_ADC_Start_DMA+0x1dc>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d11b      	bne.n	80013a6 <HAL_ADC_Start_DMA+0x1ba>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d114      	bne.n	80013a6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	e00b      	b.n	80013a6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f043 0210 	orr.w	r2, r3, #16
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000000 	.word	0x20000000
 80013b4:	431bde83 	.word	0x431bde83
 80013b8:	40012300 	.word	0x40012300
 80013bc:	08001865 	.word	0x08001865
 80013c0:	0800191f 	.word	0x0800191f
 80013c4:	0800193b 	.word	0x0800193b
 80013c8:	40012000 	.word	0x40012000

080013cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1c>
 8001420:	2302      	movs	r3, #2
 8001422:	e113      	b.n	800164c <HAL_ADC_ConfigChannel+0x244>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d925      	bls.n	8001480 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68d9      	ldr	r1, [r3, #12]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	3b1e      	subs	r3, #30
 800144a:	2207      	movs	r2, #7
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43da      	mvns	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	400a      	ands	r2, r1
 8001458:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68d9      	ldr	r1, [r3, #12]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	4603      	mov	r3, r0
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4403      	add	r3, r0
 8001472:	3b1e      	subs	r3, #30
 8001474:	409a      	lsls	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	e022      	b.n	80014c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6919      	ldr	r1, [r3, #16]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	2207      	movs	r2, #7
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	400a      	ands	r2, r1
 80014a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4403      	add	r3, r0
 80014bc:	409a      	lsls	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d824      	bhi.n	8001518 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	3b05      	subs	r3, #5
 80014e0:	221f      	movs	r2, #31
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	400a      	ands	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	3b05      	subs	r3, #5
 800150a:	fa00 f203 	lsl.w	r2, r0, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
 8001516:	e04c      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d824      	bhi.n	800156a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	3b23      	subs	r3, #35	; 0x23
 8001532:	221f      	movs	r2, #31
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43da      	mvns	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	400a      	ands	r2, r1
 8001540:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b23      	subs	r3, #35	; 0x23
 800155c:	fa00 f203 	lsl.w	r2, r0, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
 8001568:	e023      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b41      	subs	r3, #65	; 0x41
 800157c:	221f      	movs	r2, #31
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	400a      	ands	r2, r1
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3b41      	subs	r3, #65	; 0x41
 80015a6:	fa00 f203 	lsl.w	r2, r0, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_ADC_ConfigChannel+0x250>)
 80015b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a28      	ldr	r2, [pc, #160]	; (800165c <HAL_ADC_ConfigChannel+0x254>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d10f      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1d8>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b12      	cmp	r3, #18
 80015c6:	d10b      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_ADC_ConfigChannel+0x254>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12b      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x23a>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <HAL_ADC_ConfigChannel+0x258>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d003      	beq.n	80015fc <HAL_ADC_ConfigChannel+0x1f4>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b11      	cmp	r3, #17
 80015fa:	d122      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_ADC_ConfigChannel+0x258>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d111      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_ADC_ConfigChannel+0x25c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_ADC_ConfigChannel+0x260>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	0c9a      	lsrs	r2, r3, #18
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001634:	e002      	b.n	800163c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3b01      	subs	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40012300 	.word	0x40012300
 800165c:	40012000 	.word	0x40012000
 8001660:	10000012 	.word	0x10000012
 8001664:	20000000 	.word	0x20000000
 8001668:	431bde83 	.word	0x431bde83

0800166c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001674:	4b79      	ldr	r3, [pc, #484]	; (800185c <ADC_Init+0x1f0>)
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	431a      	orrs	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	021a      	lsls	r2, r3, #8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6899      	ldr	r1, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	4a58      	ldr	r2, [pc, #352]	; (8001860 <ADC_Init+0x1f4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d022      	beq.n	800174a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001712:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6899      	ldr	r1, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	e00f      	b.n	800176a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001768:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0202 	bic.w	r2, r2, #2
 8001778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7e1b      	ldrb	r3, [r3, #24]
 8001784:	005a      	lsls	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01b      	beq.n	80017d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6859      	ldr	r1, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	3b01      	subs	r3, #1
 80017c4:	035a      	lsls	r2, r3, #13
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	e007      	b.n	80017e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	051a      	lsls	r2, r3, #20
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6899      	ldr	r1, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001822:	025a      	lsls	r2, r3, #9
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800183a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6899      	ldr	r1, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	029a      	lsls	r2, r3, #10
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	609a      	str	r2, [r3, #8]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40012300 	.word	0x40012300
 8001860:	0f000001 	.word	0x0f000001

08001864 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001870:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800187a:	2b00      	cmp	r3, #0
 800187c:	d13c      	bne.n	80018f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d12b      	bne.n	80018f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800189c:	2b00      	cmp	r3, #0
 800189e:	d127      	bne.n	80018f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d119      	bne.n	80018f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0220 	bic.w	r2, r2, #32
 80018ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7fe fe75 	bl	80005e0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018f6:	e00e      	b.n	8001916 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff fd75 	bl	80013f4 <HAL_ADC_ErrorCallback>
}
 800190a:	e004      	b.n	8001916 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff fd4d 	bl	80013cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2240      	movs	r2, #64	; 0x40
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f043 0204 	orr.w	r2, r3, #4
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff fd4a 	bl	80013f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <__NVIC_EnableIRQ+0x38>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff8e 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff29 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff3e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff8e 	bl	8001a70 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5d 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff31 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa2 	bl	8001ad8 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff f99a 	bl	8000ee4 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e099      	b.n	8001cf0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bdc:	e00f      	b.n	8001bfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bde:	f7ff f981 	bl	8000ee4 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d908      	bls.n	8001bfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e078      	b.n	8001cf0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e8      	bne.n	8001bde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <HAL_DMA_Init+0x158>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d107      	bne.n	8001c68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	4313      	orrs	r3, r2
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f023 0307 	bic.w	r3, r3, #7
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d117      	bne.n	8001cc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00e      	beq.n	8001cc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fa6f 	bl	8002188 <DMA_CheckFifoParam>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e016      	b.n	8001cf0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fa26 	bl	800211c <DMA_CalcBaseAndBitshift>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	223f      	movs	r2, #63	; 0x3f
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	f010803f 	.word	0xf010803f

08001cfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_DMA_Start_IT+0x26>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e040      	b.n	8001da4 <HAL_DMA_Start_IT+0xa8>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d12f      	bne.n	8001d96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f9b8 	bl	80020c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	223f      	movs	r2, #63	; 0x3f
 8001d56:	409a      	lsls	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0216 	orr.w	r2, r2, #22
 8001d6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0208 	orr.w	r2, r2, #8
 8001d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e005      	b.n	8001da2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001db8:	4b8e      	ldr	r3, [pc, #568]	; (8001ff4 <HAL_DMA_IRQHandler+0x248>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a8e      	ldr	r2, [pc, #568]	; (8001ff8 <HAL_DMA_IRQHandler+0x24c>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01a      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0204 	bic.w	r2, r2, #4
 8001dfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2208      	movs	r2, #8
 8001e06:	409a      	lsls	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d012      	beq.n	8001e4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f043 0202 	orr.w	r2, r3, #2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2204      	movs	r2, #4
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2204      	movs	r2, #4
 8001e72:	409a      	lsls	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2210      	movs	r2, #16
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d043      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03c      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d018      	beq.n	8001eee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d108      	bne.n	8001edc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d024      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
 8001eda:	e01f      	b.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01b      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
 8001eec:	e016      	b.n	8001f1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0208 	bic.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2220      	movs	r2, #32
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 808f 	beq.w	800204c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8087 	beq.w	800204c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2220      	movs	r2, #32
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d136      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0216 	bic.w	r2, r2, #22
 8001f64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695a      	ldr	r2, [r3, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <HAL_DMA_IRQHandler+0x1da>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0208 	bic.w	r2, r2, #8
 8001f94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	223f      	movs	r2, #63	; 0x3f
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d07e      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
        }
        return;
 8001fc2:	e079      	b.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01d      	beq.n	800200e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10d      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d031      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e02c      	b.n	800204c <HAL_DMA_IRQHandler+0x2a0>
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
 800200c:	e01e      	b.n	800204c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10f      	bne.n	800203c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0210 	bic.w	r2, r2, #16
 800202a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	2b00      	cmp	r3, #0
 8002052:	d032      	beq.n	80020ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d022      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2205      	movs	r2, #5
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	3301      	adds	r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d307      	bcc.n	8002094 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f2      	bne.n	8002078 <HAL_DMA_IRQHandler+0x2cc>
 8002092:	e000      	b.n	8002096 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002094:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
 80020b6:	e000      	b.n	80020ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80020b8:	bf00      	nop
    }
  }
}
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d108      	bne.n	8002100 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020fe:	e007      	b.n	8002110 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	3b10      	subs	r3, #16
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <DMA_CalcBaseAndBitshift+0x64>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002136:	4a13      	ldr	r2, [pc, #76]	; (8002184 <DMA_CalcBaseAndBitshift+0x68>)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d909      	bls.n	800215e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	1d1a      	adds	r2, r3, #4
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	659a      	str	r2, [r3, #88]	; 0x58
 800215c:	e007      	b.n	800216e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	aaaaaaab 	.word	0xaaaaaaab
 8002184:	08009788 	.word	0x08009788

08002188 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11f      	bne.n	80021e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d856      	bhi.n	8002256 <DMA_CheckFifoParam+0xce>
 80021a8:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <DMA_CheckFifoParam+0x28>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	080021c1 	.word	0x080021c1
 80021b4:	080021d3 	.word	0x080021d3
 80021b8:	080021c1 	.word	0x080021c1
 80021bc:	08002257 	.word	0x08002257
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d046      	beq.n	800225a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d0:	e043      	b.n	800225a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021da:	d140      	bne.n	800225e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e0:	e03d      	b.n	800225e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ea:	d121      	bne.n	8002230 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d837      	bhi.n	8002262 <DMA_CheckFifoParam+0xda>
 80021f2:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <DMA_CheckFifoParam+0x70>)
 80021f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f8:	08002209 	.word	0x08002209
 80021fc:	0800220f 	.word	0x0800220f
 8002200:	08002209 	.word	0x08002209
 8002204:	08002221 	.word	0x08002221
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
      break;
 800220c:	e030      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d025      	beq.n	8002266 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221e:	e022      	b.n	8002266 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002228:	d11f      	bne.n	800226a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800222e:	e01c      	b.n	800226a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d903      	bls.n	800223e <DMA_CheckFifoParam+0xb6>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d003      	beq.n	8002244 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800223c:	e018      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
      break;
 8002242:	e015      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00e      	beq.n	800226e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      break;
 8002254:	e00b      	b.n	800226e <DMA_CheckFifoParam+0xe6>
      break;
 8002256:	bf00      	nop
 8002258:	e00a      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 800225a:	bf00      	nop
 800225c:	e008      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 800225e:	bf00      	nop
 8002260:	e006      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 8002262:	bf00      	nop
 8002264:	e004      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 8002266:	bf00      	nop
 8002268:	e002      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;   
 800226a:	bf00      	nop
 800226c:	e000      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 800226e:	bf00      	nop
    }
  } 
  
  return status; 
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e159      	b.n	8002550 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 8148 	bne.w	800254a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b03      	cmp	r3, #3
 800233e:	d017      	beq.n	8002370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d123      	bne.n	80023c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a2 	beq.w	800254a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b57      	ldr	r3, [pc, #348]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a56      	ldr	r2, [pc, #344]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b54      	ldr	r3, [pc, #336]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002422:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_GPIO_Init+0x2ec>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a49      	ldr	r2, [pc, #292]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_GPIO_Init+0x202>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a48      	ldr	r2, [pc, #288]	; (8002574 <HAL_GPIO_Init+0x2f4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0x1fe>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a47      	ldr	r2, [pc, #284]	; (8002578 <HAL_GPIO_Init+0x2f8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00d      	beq.n	800247a <HAL_GPIO_Init+0x1fa>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a46      	ldr	r2, [pc, #280]	; (800257c <HAL_GPIO_Init+0x2fc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <HAL_GPIO_Init+0x1f6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a45      	ldr	r2, [pc, #276]	; (8002580 <HAL_GPIO_Init+0x300>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_GPIO_Init+0x1f2>
 800246e:	2304      	movs	r3, #4
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002472:	2307      	movs	r3, #7
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x204>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x204>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x204>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002494:	4935      	ldr	r1, [pc, #212]	; (800256c <HAL_GPIO_Init+0x2ec>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c6:	4a2f      	ldr	r2, [pc, #188]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_GPIO_Init+0x304>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_GPIO_Init+0x304>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002544:	4a0f      	ldr	r2, [pc, #60]	; (8002584 <HAL_GPIO_Init+0x304>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f aea2 	bls.w	800229c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40013800 	.word	0x40013800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40013c00 	.word	0x40013c00

08002588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e001      	b.n	80025aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b08f      	sub	sp, #60	; 0x3c
 80025bc:	af0a      	add	r7, sp, #40	; 0x28
 80025be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e10f      	b.n	80027ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d106      	bne.n	80025ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f006 f8db 	bl	80087a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2203      	movs	r2, #3
 80025ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fbc2 	bl	8004d92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	687e      	ldr	r6, [r7, #4]
 8002616:	466d      	mov	r5, sp
 8002618:	f106 0410 	add.w	r4, r6, #16
 800261c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002624:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002628:	e885 0003 	stmia.w	r5, {r0, r1}
 800262c:	1d33      	adds	r3, r6, #4
 800262e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002630:	6838      	ldr	r0, [r7, #0]
 8002632:	f002 fa99 	bl	8004b68 <USB_CoreInit>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0d0      	b.n	80027ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f002 fbb0 	bl	8004db4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	e04a      	b.n	80026f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	333d      	adds	r3, #61	; 0x3d
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	333c      	adds	r3, #60	; 0x3c
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	b298      	uxth	r0, r3
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3344      	adds	r3, #68	; 0x44
 8002696:	4602      	mov	r2, r0
 8002698:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	3340      	adds	r3, #64	; 0x40
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	3348      	adds	r3, #72	; 0x48
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	334c      	adds	r3, #76	; 0x4c
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3354      	adds	r3, #84	; 0x54
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	3301      	adds	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d3af      	bcc.n	800265a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e044      	b.n	800278a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	3301      	adds	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	d3b5      	bcc.n	8002700 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	687e      	ldr	r6, [r7, #4]
 800279c:	466d      	mov	r5, sp
 800279e:	f106 0410 	add.w	r4, r6, #16
 80027a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80027b2:	1d33      	adds	r3, r6, #4
 80027b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b6:	6838      	ldr	r0, [r7, #0]
 80027b8:	f002 fb48 	bl	8004e4c <USB_DevInit>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00d      	b.n	80027ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 fc97 	bl	8006116 <USB_DevDisconnect>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_PCD_Start+0x1c>
 800280a:	2302      	movs	r3, #2
 800280c:	e020      	b.n	8002850 <HAL_PCD_Start+0x5e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	2b01      	cmp	r3, #1
 800281c:	d109      	bne.n	8002832 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002822:	2b01      	cmp	r3, #1
 8002824:	d005      	beq.n	8002832 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fa9a 	bl	8004d70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fc47 	bl	80060d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b08d      	sub	sp, #52	; 0x34
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f003 fd05 	bl	800627e <USB_GetMode>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 848a 	bne.w	8003190 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f003 fc69 	bl	8006158 <USB_ReadInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8480 	beq.w	800318e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 fc56 	bl	8006158 <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d107      	bne.n	80028c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f002 0202 	and.w	r2, r2, #2
 80028c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fc44 	bl	8006158 <USB_ReadInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d161      	bne.n	800299e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0210 	bic.w	r2, r2, #16
 80028e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	f003 020f 	and.w	r2, r3, #15
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	3304      	adds	r3, #4
 8002908:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	0c5b      	lsrs	r3, r3, #17
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	2b02      	cmp	r3, #2
 8002914:	d124      	bne.n	8002960 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d035      	beq.n	800298e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800292c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6a38      	ldr	r0, [r7, #32]
 8002936:	f003 fa7b 	bl	8005e30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002946:	441a      	add	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	6a1a      	ldr	r2, [r3, #32]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002958:	441a      	add	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	621a      	str	r2, [r3, #32]
 800295e:	e016      	b.n	800298e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	0c5b      	lsrs	r3, r3, #17
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	2b06      	cmp	r3, #6
 800296a:	d110      	bne.n	800298e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002972:	2208      	movs	r2, #8
 8002974:	4619      	mov	r1, r3
 8002976:	6a38      	ldr	r0, [r7, #32]
 8002978:	f003 fa5a 	bl	8005e30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	6a1a      	ldr	r2, [r3, #32]
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002988:	441a      	add	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0210 	orr.w	r2, r2, #16
 800299c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fbd8 	bl	8006158 <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029b2:	f040 80a7 	bne.w	8002b04 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 fbdd 	bl	800617e <USB_ReadDevAllOutEpInterrupt>
 80029c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029c6:	e099      	b.n	8002afc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 808e 	beq.w	8002af0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fc01 	bl	80061e6 <USB_ReadDevOutEPInterrupt>
 80029e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00c      	beq.n	8002a0a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fc:	461a      	mov	r2, r3
 80029fe:	2301      	movs	r3, #1
 8002a00:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fec3 	bl	8003790 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00c      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a20:	461a      	mov	r2, r3
 8002a22:	2308      	movs	r3, #8
 8002a24:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 ff99 	bl	8003960 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a44:	461a      	mov	r2, r3
 8002a46:	2310      	movs	r3, #16
 8002a48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d030      	beq.n	8002ab6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d109      	bne.n	8002a74 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a72:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	3304      	adds	r3, #4
 8002a88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	78db      	ldrb	r3, [r3, #3]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d108      	bne.n	8002aa4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2200      	movs	r2, #0
 8002a96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f005 ff7a 	bl	8008998 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002acc:	461a      	mov	r2, r3
 8002ace:	2320      	movs	r3, #32
 8002ad0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	3301      	adds	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f47f af62 	bne.w	80029c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 fb25 	bl	8006158 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b18:	f040 80db 	bne.w	8002cd2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 fb46 	bl	80061b2 <USB_ReadDevAllInEpInterrupt>
 8002b26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b2c:	e0cd      	b.n	8002cca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80c2 	beq.w	8002cbe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 fb6c 	bl	8006222 <USB_ReadDevInEPInterrupt>
 8002b4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d057      	beq.n	8002c06 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69f9      	ldr	r1, [r7, #28]
 8002b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b76:	4013      	ands	r3, r2
 8002b78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b86:	461a      	mov	r2, r3
 8002b88:	2301      	movs	r3, #1
 8002b8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d132      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	334c      	adds	r3, #76	; 0x4c
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4403      	add	r3, r0
 8002bb4:	3348      	adds	r3, #72	; 0x48
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4419      	add	r1, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4403      	add	r3, r0
 8002bc8:	334c      	adds	r3, #76	; 0x4c
 8002bca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d113      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x3a2>
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3354      	adds	r3, #84	; 0x54
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d108      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	f003 fb73 	bl	80062e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f005 fe4e 	bl	80088a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2308      	movs	r3, #8
 8002c20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2310      	movs	r3, #16
 8002c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c54:	461a      	mov	r2, r3
 8002c56:	2340      	movs	r3, #64	; 0x40
 8002c58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d023      	beq.n	8002cac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c66:	6a38      	ldr	r0, [r7, #32]
 8002c68:	f002 fa54 	bl	8005114 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	3338      	adds	r3, #56	; 0x38
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	78db      	ldrb	r3, [r3, #3]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d108      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f005 fe91 	bl	80089bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2302      	movs	r3, #2
 8002caa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fcdb 	bl	8003674 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f47f af2e 	bne.w	8002b2e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 fa3e 	bl	8006158 <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ce6:	d122      	bne.n	8002d2e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d108      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d0e:	2100      	movs	r1, #0
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fec3 	bl	8003a9c <HAL_PCDEx_LPM_Callback>
 8002d16:	e002      	b.n	8002d1e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f005 fe2f 	bl	800897c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 fa10 	bl	8006158 <USB_ReadInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d42:	d112      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d102      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f005 fdeb 	bl	8008930 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d68:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 f9f2 	bl	8006158 <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7e:	f040 80b7 	bne.w	8002ef0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2110      	movs	r1, #16
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f002 f9b9 	bl	8005114 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da6:	e046      	b.n	8002e36 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db4:	461a      	mov	r2, r3
 8002db6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dcc:	0151      	lsls	r1, r2, #5
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e00:	0151      	lsls	r1, r2, #5
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	440a      	add	r2, r1
 8002e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e20:	0151      	lsls	r1, r2, #5
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	440a      	add	r2, r1
 8002e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e32:	3301      	adds	r3, #1
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d3b3      	bcc.n	8002da8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e4e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d016      	beq.n	8002e8a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6c:	f043 030b 	orr.w	r3, r3, #11
 8002e70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e82:	f043 030b 	orr.w	r3, r3, #11
 8002e86:	6453      	str	r3, [r2, #68]	; 0x44
 8002e88:	e015      	b.n	8002eb6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e9c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ea0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eb0:	f043 030b 	orr.w	r3, r3, #11
 8002eb4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ec8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eda:	461a      	mov	r2, r3
 8002edc:	f003 fa00 	bl	80062e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f003 f92f 	bl	8006158 <USB_ReadInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f04:	d124      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 f9c5 	bl	800629a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 f97a 	bl	800520e <USB_GetDevSpeed>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681c      	ldr	r4, [r3, #0]
 8002f26:	f001 fa29 	bl	800437c <HAL_RCC_GetHCLKFreq>
 8002f2a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	4620      	mov	r0, r4
 8002f36:	f001 fe79 	bl	8004c2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f005 fcd9 	bl	80088f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 f8ff 	bl	8006158 <USB_ReadInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d10a      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f005 fcb6 	bl	80088d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f002 0208 	and.w	r2, r2, #8
 8002f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 f8ea 	bl	8006158 <USB_ReadInterrupts>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d122      	bne.n	8002fd4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	e014      	b.n	8002fca <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fb27 	bl	8003612 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3e5      	bcc.n	8002fa0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 f8bd 	bl	8006158 <USB_ReadInterrupts>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe8:	d13b      	bne.n	8003062 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fea:	2301      	movs	r3, #1
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	e02b      	b.n	8003048 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	3340      	adds	r3, #64	; 0x40
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d115      	bne.n	8003042 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003016:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003018:	2b00      	cmp	r3, #0
 800301a:	da12      	bge.n	8003042 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	333f      	adds	r3, #63	; 0x3f
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003038:	b2db      	uxtb	r3, r3
 800303a:	4619      	mov	r1, r3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fae8 	bl	8003612 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	3301      	adds	r3, #1
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304e:	429a      	cmp	r2, r3
 8003050:	d3ce      	bcc.n	8002ff0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003060:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f003 f876 	bl	8006158 <USB_ReadInterrupts>
 800306c:	4603      	mov	r3, r0
 800306e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003072:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003076:	d155      	bne.n	8003124 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003078:	2301      	movs	r3, #1
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
 800307c:	e045      	b.n	800310a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d12e      	bne.n	8003104 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da2b      	bge.n	8003104 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80030b8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030bc:	429a      	cmp	r2, r3
 80030be:	d121      	bne.n	8003104 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003100:	6053      	str	r3, [r2, #4]
            break;
 8003102:	e007      	b.n	8003114 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	3301      	adds	r3, #1
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	429a      	cmp	r2, r3
 8003112:	d3b4      	bcc.n	800307e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f003 f815 	bl	8006158 <USB_ReadInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d10a      	bne.n	8003150 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f005 fc50 	bl	80089e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800314e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f002 ffff 	bl	8006158 <USB_ReadInterrupts>
 800315a:	4603      	mov	r3, r0
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d115      	bne.n	8003190 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f005 fc40 	bl	80089fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	e000      	b.n	8003190 <HAL_PCD_IRQHandler+0x938>
      return;
 800318e:	bf00      	nop
    }
  }
}
 8003190:	3734      	adds	r7, #52	; 0x34
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}

08003196 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_PCD_SetAddress+0x1a>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e013      	b.n	80031d8 <HAL_PCD_SetAddress+0x42>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f002 ff5d 	bl	8006088 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	70fb      	strb	r3, [r7, #3]
 80031f2:	460b      	mov	r3, r1
 80031f4:	803b      	strh	r3, [r7, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003202:	2b00      	cmp	r3, #0
 8003204:	da0f      	bge.n	8003226 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 020f 	and.w	r2, r3, #15
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	3338      	adds	r3, #56	; 0x38
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	3304      	adds	r3, #4
 800321c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	705a      	strb	r2, [r3, #1]
 8003224:	e00f      	b.n	8003246 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 020f 	and.w	r2, r3, #15
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	3304      	adds	r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003252:	883a      	ldrh	r2, [r7, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	78ba      	ldrb	r2, [r7, #2]
 800325c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	785b      	ldrb	r3, [r3, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d004      	beq.n	8003270 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003270:	78bb      	ldrb	r3, [r7, #2]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d102      	bne.n	800327c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_PCD_EP_Open+0xaa>
 8003286:	2302      	movs	r3, #2
 8003288:	e00e      	b.n	80032a8 <HAL_PCD_EP_Open+0xc8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	4618      	mov	r0, r3
 800329a:	f001 ffdd 	bl	8005258 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80032a6:	7afb      	ldrb	r3, [r7, #11]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	da0f      	bge.n	80032e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	f003 020f 	and.w	r2, r3, #15
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	3338      	adds	r3, #56	; 0x38
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	3304      	adds	r3, #4
 80032da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	705a      	strb	r2, [r3, #1]
 80032e2:	e00f      	b.n	8003304 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	f003 020f 	and.w	r2, r3, #15
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	3304      	adds	r3, #4
 80032fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	b2da      	uxtb	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_PCD_EP_Close+0x6e>
 800331a:	2302      	movs	r3, #2
 800331c:	e00e      	b.n	800333c <HAL_PCD_EP_Close+0x8c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68f9      	ldr	r1, [r7, #12]
 800332c:	4618      	mov	r0, r3
 800332e:	f002 f81b 	bl	8005368 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	460b      	mov	r3, r1
 8003352:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003354:	7afb      	ldrb	r3, [r7, #11]
 8003356:	f003 020f 	and.w	r2, r3, #15
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	3304      	adds	r3, #4
 800336c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2200      	movs	r2, #0
 8003384:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003386:	7afb      	ldrb	r3, [r7, #11]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	b2da      	uxtb	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033a0:	7afb      	ldrb	r3, [r7, #11]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	6979      	ldr	r1, [r7, #20]
 80033b8:	f002 fafa 	bl	80059b0 <USB_EP0StartXfer>
 80033bc:	e008      	b.n	80033d0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	6979      	ldr	r1, [r7, #20]
 80033cc:	f002 f8a8 	bl	8005520 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80033fc:	681b      	ldr	r3, [r3, #0]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	460b      	mov	r3, r1
 8003418:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341a:	7afb      	ldrb	r3, [r7, #11]
 800341c:	f003 020f 	and.w	r2, r3, #15
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	3338      	adds	r3, #56	; 0x38
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2201      	movs	r2, #1
 8003448:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800344a:	7afb      	ldrb	r3, [r7, #11]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	b2da      	uxtb	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003464:	7afb      	ldrb	r3, [r7, #11]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	f002 fa98 	bl	80059b0 <USB_EP0StartXfer>
 8003480:	e008      	b.n	8003494 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	6979      	ldr	r1, [r7, #20]
 8003490:	f002 f846 	bl	8005520 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d901      	bls.n	80034bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e050      	b.n	800355e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	da0f      	bge.n	80034e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 020f 	and.w	r2, r3, #15
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	3338      	adds	r3, #56	; 0x38
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	705a      	strb	r2, [r3, #1]
 80034e2:	e00d      	b.n	8003500 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	b2da      	uxtb	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_PCD_EP_SetStall+0x82>
 800351c:	2302      	movs	r3, #2
 800351e:	e01e      	b.n	800355e <HAL_PCD_EP_SetStall+0xc0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68f9      	ldr	r1, [r7, #12]
 800352e:	4618      	mov	r0, r3
 8003530:	f002 fcd6 	bl	8005ee0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	b2d9      	uxtb	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800354e:	461a      	mov	r2, r3
 8003550:	f002 fec6 	bl	80062e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	460b      	mov	r3, r1
 8003570:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 020f 	and.w	r2, r3, #15
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	429a      	cmp	r2, r3
 800357e:	d901      	bls.n	8003584 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e042      	b.n	800360a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003588:	2b00      	cmp	r3, #0
 800358a:	da0f      	bge.n	80035ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	f003 020f 	and.w	r2, r3, #15
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	3338      	adds	r3, #56	; 0x38
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	4413      	add	r3, r2
 80035a0:	3304      	adds	r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	705a      	strb	r2, [r3, #1]
 80035aa:	e00f      	b.n	80035cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 020f 	and.w	r2, r3, #15
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_PCD_EP_ClrStall+0x86>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e00e      	b.n	800360a <HAL_PCD_EP_ClrStall+0xa4>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68f9      	ldr	r1, [r7, #12]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f002 fcde 	bl	8005fbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800361e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003622:	2b00      	cmp	r3, #0
 8003624:	da0c      	bge.n	8003640 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 020f 	and.w	r2, r3, #15
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	3338      	adds	r3, #56	; 0x38
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	3304      	adds	r3, #4
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e00c      	b.n	800365a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 020f 	and.w	r2, r3, #15
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	3304      	adds	r3, #4
 8003658:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68f9      	ldr	r1, [r7, #12]
 8003660:	4618      	mov	r0, r3
 8003662:	f002 fafd 	bl	8005c60 <USB_EPStopXfer>
 8003666:	4603      	mov	r3, r0
 8003668:	72fb      	strb	r3, [r7, #11]

  return ret;
 800366a:	7afb      	ldrb	r3, [r7, #11]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af02      	add	r7, sp, #8
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	3338      	adds	r3, #56	; 0x38
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	3304      	adds	r3, #4
 800369a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1a      	ldr	r2, [r3, #32]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d901      	bls.n	80036ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e06c      	b.n	8003786 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d902      	bls.n	80036c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	3303      	adds	r3, #3
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036d0:	e02b      	b.n	800372a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d902      	bls.n	80036ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3303      	adds	r3, #3
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6919      	ldr	r1, [r3, #16]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003706:	b2db      	uxtb	r3, r3
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	4603      	mov	r3, r0
 800370c:	6978      	ldr	r0, [r7, #20]
 800370e:	f002 fb51 	bl	8005db4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	441a      	add	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1a      	ldr	r2, [r3, #32]
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	441a      	add	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	b29b      	uxth	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	429a      	cmp	r2, r3
 800373e:	d809      	bhi.n	8003754 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003748:	429a      	cmp	r2, r3
 800374a:	d203      	bcs.n	8003754 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1be      	bne.n	80036d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	429a      	cmp	r2, r3
 800375e:	d811      	bhi.n	8003784 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	2201      	movs	r2, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	43db      	mvns	r3, r3
 800377a:	6939      	ldr	r1, [r7, #16]
 800377c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003780:	4013      	ands	r3, r2
 8003782:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	333c      	adds	r3, #60	; 0x3c
 80037a8:	3304      	adds	r3, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d17b      	bne.n	80038be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d015      	beq.n	80037fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	4a61      	ldr	r2, [pc, #388]	; (8003958 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	f240 80b9 	bls.w	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80b3 	beq.w	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f2:	461a      	mov	r2, r3
 80037f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f8:	6093      	str	r3, [r2, #8]
 80037fa:	e0a7      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003812:	461a      	mov	r2, r3
 8003814:	2320      	movs	r3, #32
 8003816:	6093      	str	r3, [r2, #8]
 8003818:	e098      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	f040 8093 	bne.w	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d90f      	bls.n	800384e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	461a      	mov	r2, r3
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	6093      	str	r3, [r2, #8]
 800384c:	e07e      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	0159      	lsls	r1, r3, #5
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	440b      	add	r3, r1
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387a:	1ad2      	subs	r2, r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d114      	bne.n	80038b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003898:	461a      	mov	r2, r3
 800389a:	2101      	movs	r1, #1
 800389c:	f002 fd20 	bl	80062e0 <USB_EP0_OutStart>
 80038a0:	e006      	b.n	80038b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	441a      	add	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f004 ffd8 	bl	800886c <HAL_PCD_DataOutStageCallback>
 80038bc:	e046      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	4a26      	ldr	r2, [pc, #152]	; (800395c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d124      	bne.n	8003910 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038dc:	461a      	mov	r2, r3
 80038de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e2:	6093      	str	r3, [r2, #8]
 80038e4:	e032      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	461a      	mov	r2, r3
 80038fe:	2320      	movs	r3, #32
 8003900:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f004 ffaf 	bl	800886c <HAL_PCD_DataOutStageCallback>
 800390e:	e01d      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d114      	bne.n	8003940 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003938:	461a      	mov	r2, r3
 800393a:	2100      	movs	r1, #0
 800393c:	f002 fcd0 	bl	80062e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4619      	mov	r1, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f004 ff90 	bl	800886c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	4f54300a 	.word	0x4f54300a
 800395c:	4f54310a 	.word	0x4f54310a

08003960 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	333c      	adds	r3, #60	; 0x3c
 8003978:	3304      	adds	r3, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d90e      	bls.n	80039b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	461a      	mov	r2, r3
 80039ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f004 ff47 	bl	8008848 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d90c      	bls.n	80039dc <PCD_EP_OutSetupPacket_int+0x7c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d108      	bne.n	80039dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039d4:	461a      	mov	r2, r3
 80039d6:	2101      	movs	r1, #1
 80039d8:	f002 fc82 	bl	80062e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	4f54300a 	.word	0x4f54300a

080039ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
 80039f8:	4613      	mov	r3, r2
 80039fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d107      	bne.n	8003a1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a0a:	883b      	ldrh	r3, [r7, #0]
 8003a0c:	0419      	lsls	r1, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
 8003a18:	e028      	b.n	8003a6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]
 8003a2c:	e00d      	b.n	8003a4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	3340      	adds	r3, #64	; 0x40
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	0c1b      	lsrs	r3, r3, #16
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	4413      	add	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	3301      	adds	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d3ec      	bcc.n	8003a2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a54:	883b      	ldrh	r3, [r7, #0]
 8003a56:	0418      	lsls	r0, r3, #16
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	4302      	orrs	r2, r0
 8003a64:	3340      	adds	r3, #64	; 0x40
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e267      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d075      	beq.n	8003bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ad2:	4b88      	ldr	r3, [pc, #544]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d00c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ade:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d112      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aea:	4b82      	ldr	r3, [pc, #520]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	4b7e      	ldr	r3, [pc, #504]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05b      	beq.n	8003bbc <HAL_RCC_OscConfig+0x108>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d157      	bne.n	8003bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e242      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b18:	d106      	bne.n	8003b28 <HAL_RCC_OscConfig+0x74>
 8003b1a:	4b76      	ldr	r3, [pc, #472]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a75      	ldr	r2, [pc, #468]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e01d      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x98>
 8003b32:	4b70      	ldr	r3, [pc, #448]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6f      	ldr	r2, [pc, #444]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a6c      	ldr	r2, [pc, #432]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b4c:	4b69      	ldr	r3, [pc, #420]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a68      	ldr	r2, [pc, #416]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b66      	ldr	r3, [pc, #408]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a65      	ldr	r2, [pc, #404]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fd f9ba 	bl	8000ee4 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fd f9b6 	bl	8000ee4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e207      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b5b      	ldr	r3, [pc, #364]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0xc0>
 8003b92:	e014      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd f9a6 	bl	8000ee4 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fd f9a2 	bl	8000ee4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e1f3      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0xe8>
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d063      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bca:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd6:	4b47      	ldr	r3, [pc, #284]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d11c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be2:	4b44      	ldr	r3, [pc, #272]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d116      	bne.n	8003c1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_RCC_OscConfig+0x152>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e1c7      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c06:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4937      	ldr	r1, [pc, #220]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	e03a      	b.n	8003c92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d020      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c24:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <HAL_RCC_OscConfig+0x244>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd f95b 	bl	8000ee4 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fd f957 	bl	8000ee4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e1a8      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4925      	ldr	r1, [pc, #148]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]
 8003c64:	e015      	b.n	8003c92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <HAL_RCC_OscConfig+0x244>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd f93a 	bl	8000ee4 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c74:	f7fd f936 	bl	8000ee4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e187      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d036      	beq.n	8003d0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_RCC_OscConfig+0x248>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fd f91a 	bl	8000ee4 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb4:	f7fd f916 	bl	8000ee4 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e167      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x200>
 8003cd2:	e01b      	b.n	8003d0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_OscConfig+0x248>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fd f903 	bl	8000ee4 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce0:	e00e      	b.n	8003d00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fd f8ff 	bl	8000ee4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d907      	bls.n	8003d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e150      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	42470000 	.word	0x42470000
 8003cfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d00:	4b88      	ldr	r3, [pc, #544]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ea      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8097 	beq.w	8003e48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1e:	4b81      	ldr	r3, [pc, #516]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	4b7d      	ldr	r3, [pc, #500]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	4a7c      	ldr	r2, [pc, #496]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d38:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3a:	4b7a      	ldr	r3, [pc, #488]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4a:	4b77      	ldr	r3, [pc, #476]	; (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d118      	bne.n	8003d88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d56:	4b74      	ldr	r3, [pc, #464]	; (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a73      	ldr	r2, [pc, #460]	; (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d62:	f7fd f8bf 	bl	8000ee4 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fd f8bb 	bl	8000ee4 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e10c      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x2ea>
 8003d90:	4b64      	ldr	r3, [pc, #400]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a63      	ldr	r2, [pc, #396]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RCC_OscConfig+0x324>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x30c>
 8003da6:	4b5f      	ldr	r3, [pc, #380]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a5e      	ldr	r2, [pc, #376]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
 8003db2:	4b5c      	ldr	r3, [pc, #368]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a5b      	ldr	r2, [pc, #364]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCC_OscConfig+0x324>
 8003dc0:	4b58      	ldr	r3, [pc, #352]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	4a57      	ldr	r2, [pc, #348]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6713      	str	r3, [r2, #112]	; 0x70
 8003dcc:	4b55      	ldr	r3, [pc, #340]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a54      	ldr	r2, [pc, #336]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	f023 0304 	bic.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fd f880 	bl	8000ee4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fd f87c 	bl	8000ee4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0cb      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	4b49      	ldr	r3, [pc, #292]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ee      	beq.n	8003de8 <HAL_RCC_OscConfig+0x334>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0c:	f7fd f86a 	bl	8000ee4 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fd f866 	bl	8000ee4 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0b5      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2a:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ee      	bne.n	8003e14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3c:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	4a38      	ldr	r2, [pc, #224]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80a1 	beq.w	8003f94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e52:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d05c      	beq.n	8003f18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d141      	bne.n	8003eea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fd f83a 	bl	8000ee4 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd f836 	bl	8000ee4 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e087      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	019b      	lsls	r3, r3, #6
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	491b      	ldr	r1, [pc, #108]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fd f80f 	bl	8000ee4 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fd f80b 	bl	8000ee4 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e05c      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x416>
 8003ee8:	e054      	b.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fc fff8 	bl	8000ee4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fc fff4 	bl	8000ee4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e045      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x444>
 8003f16:	e03d      	b.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e038      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <HAL_RCC_OscConfig+0x4ec>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d028      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d121      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d11a      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f60:	4013      	ands	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d107      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0cc      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b68      	ldr	r3, [pc, #416]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d90c      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b65      	ldr	r3, [pc, #404]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b63      	ldr	r3, [pc, #396]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0b8      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff8:	4b59      	ldr	r3, [pc, #356]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a58      	ldr	r2, [pc, #352]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004010:	4b53      	ldr	r3, [pc, #332]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a52      	ldr	r2, [pc, #328]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800401a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401c:	4b50      	ldr	r3, [pc, #320]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	494d      	ldr	r1, [pc, #308]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d044      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b47      	ldr	r3, [pc, #284]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d119      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d003      	beq.n	8004062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405e:	2b03      	cmp	r3, #3
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b3f      	ldr	r3, [pc, #252]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e067      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b37      	ldr	r3, [pc, #220]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4934      	ldr	r1, [pc, #208]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004094:	f7fc ff26 	bl	8000ee4 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fc ff22 	bl	8000ee4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e04f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b25      	ldr	r3, [pc, #148]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d20c      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b22      	ldr	r3, [pc, #136]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b20      	ldr	r3, [pc, #128]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e032      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4916      	ldr	r1, [pc, #88]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490e      	ldr	r1, [pc, #56]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800412a:	f000 f821 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490a      	ldr	r1, [pc, #40]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	fa22 f303 	lsr.w	r3, r2, r3
 8004142:	4a09      	ldr	r2, [pc, #36]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc fe86 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023c00 	.word	0x40023c00
 8004160:	40023800 	.word	0x40023800
 8004164:	08009770 	.word	0x08009770
 8004168:	20000000 	.word	0x20000000
 800416c:	20000004 	.word	0x20000004

08004170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004174:	b094      	sub	sp, #80	; 0x50
 8004176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	647b      	str	r3, [r7, #68]	; 0x44
 800417c:	2300      	movs	r3, #0
 800417e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004180:	2300      	movs	r3, #0
 8004182:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004188:	4b79      	ldr	r3, [pc, #484]	; (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d00d      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004194:	2b08      	cmp	r3, #8
 8004196:	f200 80e1 	bhi.w	800435c <HAL_RCC_GetSysClockFreq+0x1ec>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x34>
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x3a>
 80041a2:	e0db      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b73      	ldr	r3, [pc, #460]	; (8004374 <HAL_RCC_GetSysClockFreq+0x204>)
 80041a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041a8:	e0db      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041aa:	4b73      	ldr	r3, [pc, #460]	; (8004378 <HAL_RCC_GetSysClockFreq+0x208>)
 80041ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ae:	e0d8      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b0:	4b6f      	ldr	r3, [pc, #444]	; (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ba:	4b6d      	ldr	r3, [pc, #436]	; (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d063      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b6a      	ldr	r3, [pc, #424]	; (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80041d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
 80041da:	2300      	movs	r3, #0
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
 80041de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	0159      	lsls	r1, r3, #5
 80041f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f4:	0150      	lsls	r0, r2, #5
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4621      	mov	r1, r4
 80041fc:	1a51      	subs	r1, r2, r1
 80041fe:	6139      	str	r1, [r7, #16]
 8004200:	4629      	mov	r1, r5
 8004202:	eb63 0301 	sbc.w	r3, r3, r1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004214:	4659      	mov	r1, fp
 8004216:	018b      	lsls	r3, r1, #6
 8004218:	4651      	mov	r1, sl
 800421a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800421e:	4651      	mov	r1, sl
 8004220:	018a      	lsls	r2, r1, #6
 8004222:	4651      	mov	r1, sl
 8004224:	ebb2 0801 	subs.w	r8, r2, r1
 8004228:	4659      	mov	r1, fp
 800422a:	eb63 0901 	sbc.w	r9, r3, r1
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800423e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004242:	4690      	mov	r8, r2
 8004244:	4699      	mov	r9, r3
 8004246:	4623      	mov	r3, r4
 8004248:	eb18 0303 	adds.w	r3, r8, r3
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	462b      	mov	r3, r5
 8004250:	eb49 0303 	adc.w	r3, r9, r3
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004262:	4629      	mov	r1, r5
 8004264:	024b      	lsls	r3, r1, #9
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800426c:	4621      	mov	r1, r4
 800426e:	024a      	lsls	r2, r1, #9
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004276:	2200      	movs	r2, #0
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
 800427a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800427c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004280:	f7fc f806 	bl	8000290 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800428c:	e058      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b38      	ldr	r3, [pc, #224]	; (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	2200      	movs	r2, #0
 8004296:	4618      	mov	r0, r3
 8004298:	4611      	mov	r1, r2
 800429a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
 80042a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	0159      	lsls	r1, r3, #5
 80042b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ba:	0150      	lsls	r0, r2, #5
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4641      	mov	r1, r8
 80042c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042c6:	4649      	mov	r1, r9
 80042c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042e0:	ebb2 040a 	subs.w	r4, r2, sl
 80042e4:	eb63 050b 	sbc.w	r5, r3, fp
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	00eb      	lsls	r3, r5, #3
 80042f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	4614      	mov	r4, r2
 80042fa:	461d      	mov	r5, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	18e3      	adds	r3, r4, r3
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	464b      	mov	r3, r9
 8004304:	eb45 0303 	adc.w	r3, r5, r3
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004316:	4629      	mov	r1, r5
 8004318:	028b      	lsls	r3, r1, #10
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004320:	4621      	mov	r1, r4
 8004322:	028a      	lsls	r2, r1, #10
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432a:	2200      	movs	r2, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	61fa      	str	r2, [r7, #28]
 8004330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004334:	f7fb ffac 	bl	8000290 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4613      	mov	r3, r2
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	3301      	adds	r3, #1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004350:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800435a:	e002      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_RCC_GetSysClockFreq+0x204>)
 800435e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004364:	4618      	mov	r0, r3
 8004366:	3750      	adds	r7, #80	; 0x50
 8004368:	46bd      	mov	sp, r7
 800436a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	00f42400 	.word	0x00f42400
 8004378:	007a1200 	.word	0x007a1200

0800437c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <HAL_RCC_GetHCLKFreq+0x14>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000000 	.word	0x20000000

08004394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004398:	f7ff fff0 	bl	800437c <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0a9b      	lsrs	r3, r3, #10
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4903      	ldr	r1, [pc, #12]	; (80043b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08009780 	.word	0x08009780

080043bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043c0:	f7ff ffdc 	bl	800437c <HAL_RCC_GetHCLKFreq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	0b5b      	lsrs	r3, r3, #13
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	4903      	ldr	r1, [pc, #12]	; (80043e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d2:	5ccb      	ldrb	r3, [r1, r3]
 80043d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d8:	4618      	mov	r0, r3
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40023800 	.word	0x40023800
 80043e0:	08009780 	.word	0x08009780

080043e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e03f      	b.n	8004476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fc02 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2224      	movs	r2, #36	; 0x24
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f929 	bl	8004680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800443c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800444c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800445c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b08a      	sub	sp, #40	; 0x28
 8004482:	af02      	add	r7, sp, #8
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	d17c      	bne.n	8004598 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_UART_Transmit+0x2c>
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e075      	b.n	800459a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x3e>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e06e      	b.n	800459a <HAL_UART_Transmit+0x11c>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2221      	movs	r2, #33	; 0x21
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044d2:	f7fc fd07 	bl	8000ee4 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ec:	d108      	bne.n	8004500 <HAL_UART_Transmit+0x82>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	e003      	b.n	8004508 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004510:	e02a      	b.n	8004568 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2200      	movs	r2, #0
 800451a:	2180      	movs	r1, #128	; 0x80
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f840 	bl	80045a2 <UART_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e036      	b.n	800459a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004540:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	3302      	adds	r3, #2
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e007      	b.n	800455a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	781a      	ldrb	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	3301      	adds	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1cf      	bne.n	8004512 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2200      	movs	r2, #0
 800457a:	2140      	movs	r1, #64	; 0x40
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f810 	bl	80045a2 <UART_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e006      	b.n	800459a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b090      	sub	sp, #64	; 0x40
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b2:	e050      	b.n	8004656 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d04c      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80045c2:	f7fc fc8f 	bl	8000ee4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d241      	bcs.n	8004656 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	330c      	adds	r3, #12
 80045f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045f2:	637a      	str	r2, [r7, #52]	; 0x34
 80045f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e5      	bne.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3314      	adds	r3, #20
 800460c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	613b      	str	r3, [r7, #16]
   return(result);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	63bb      	str	r3, [r7, #56]	; 0x38
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3314      	adds	r3, #20
 8004624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004626:	623a      	str	r2, [r7, #32]
 8004628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	69f9      	ldr	r1, [r7, #28]
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	61bb      	str	r3, [r7, #24]
   return(result);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e5      	bne.n	8004606 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e00f      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	bf0c      	ite	eq
 8004666:	2301      	moveq	r3, #1
 8004668:	2300      	movne	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	429a      	cmp	r2, r3
 8004672:	d09f      	beq.n	80045b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3740      	adds	r7, #64	; 0x40
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004684:	b0c0      	sub	sp, #256	; 0x100
 8004686:	af00      	add	r7, sp, #0
 8004688:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469c:	68d9      	ldr	r1, [r3, #12]
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	ea40 0301 	orr.w	r3, r0, r1
 80046a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	431a      	orrs	r2, r3
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046d8:	f021 010c 	bic.w	r1, r1, #12
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046e6:	430b      	orrs	r3, r1
 80046e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	6999      	ldr	r1, [r3, #24]
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	ea40 0301 	orr.w	r3, r0, r1
 8004706:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b8f      	ldr	r3, [pc, #572]	; (800494c <UART_SetConfig+0x2cc>)
 8004710:	429a      	cmp	r2, r3
 8004712:	d005      	beq.n	8004720 <UART_SetConfig+0xa0>
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b8d      	ldr	r3, [pc, #564]	; (8004950 <UART_SetConfig+0x2d0>)
 800471c:	429a      	cmp	r2, r3
 800471e:	d104      	bne.n	800472a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004720:	f7ff fe4c 	bl	80043bc <HAL_RCC_GetPCLK2Freq>
 8004724:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004728:	e003      	b.n	8004732 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800472a:	f7ff fe33 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 800472e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473c:	f040 810c 	bne.w	8004958 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800474a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800474e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004752:	4622      	mov	r2, r4
 8004754:	462b      	mov	r3, r5
 8004756:	1891      	adds	r1, r2, r2
 8004758:	65b9      	str	r1, [r7, #88]	; 0x58
 800475a:	415b      	adcs	r3, r3
 800475c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800475e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004762:	4621      	mov	r1, r4
 8004764:	eb12 0801 	adds.w	r8, r2, r1
 8004768:	4629      	mov	r1, r5
 800476a:	eb43 0901 	adc.w	r9, r3, r1
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800477a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800477e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004782:	4690      	mov	r8, r2
 8004784:	4699      	mov	r9, r3
 8004786:	4623      	mov	r3, r4
 8004788:	eb18 0303 	adds.w	r3, r8, r3
 800478c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004790:	462b      	mov	r3, r5
 8004792:	eb49 0303 	adc.w	r3, r9, r3
 8004796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047ae:	460b      	mov	r3, r1
 80047b0:	18db      	adds	r3, r3, r3
 80047b2:	653b      	str	r3, [r7, #80]	; 0x50
 80047b4:	4613      	mov	r3, r2
 80047b6:	eb42 0303 	adc.w	r3, r2, r3
 80047ba:	657b      	str	r3, [r7, #84]	; 0x54
 80047bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047c4:	f7fb fd64 	bl	8000290 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4b61      	ldr	r3, [pc, #388]	; (8004954 <UART_SetConfig+0x2d4>)
 80047ce:	fba3 2302 	umull	r2, r3, r3, r2
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	011c      	lsls	r4, r3, #4
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80047f0:	415b      	adcs	r3, r3
 80047f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047f8:	4641      	mov	r1, r8
 80047fa:	eb12 0a01 	adds.w	sl, r2, r1
 80047fe:	4649      	mov	r1, r9
 8004800:	eb43 0b01 	adc.w	fp, r3, r1
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004810:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004818:	4692      	mov	sl, r2
 800481a:	469b      	mov	fp, r3
 800481c:	4643      	mov	r3, r8
 800481e:	eb1a 0303 	adds.w	r3, sl, r3
 8004822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004826:	464b      	mov	r3, r9
 8004828:	eb4b 0303 	adc.w	r3, fp, r3
 800482c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800483c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004840:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004844:	460b      	mov	r3, r1
 8004846:	18db      	adds	r3, r3, r3
 8004848:	643b      	str	r3, [r7, #64]	; 0x40
 800484a:	4613      	mov	r3, r2
 800484c:	eb42 0303 	adc.w	r3, r2, r3
 8004850:	647b      	str	r3, [r7, #68]	; 0x44
 8004852:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004856:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800485a:	f7fb fd19 	bl	8000290 <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4611      	mov	r1, r2
 8004864:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <UART_SetConfig+0x2d4>)
 8004866:	fba3 2301 	umull	r2, r3, r3, r1
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2264      	movs	r2, #100	; 0x64
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	1acb      	subs	r3, r1, r3
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800487a:	4b36      	ldr	r3, [pc, #216]	; (8004954 <UART_SetConfig+0x2d4>)
 800487c:	fba3 2302 	umull	r2, r3, r3, r2
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004888:	441c      	add	r4, r3
 800488a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800488e:	2200      	movs	r2, #0
 8004890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004894:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004898:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800489c:	4642      	mov	r2, r8
 800489e:	464b      	mov	r3, r9
 80048a0:	1891      	adds	r1, r2, r2
 80048a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80048a4:	415b      	adcs	r3, r3
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048ac:	4641      	mov	r1, r8
 80048ae:	1851      	adds	r1, r2, r1
 80048b0:	6339      	str	r1, [r7, #48]	; 0x30
 80048b2:	4649      	mov	r1, r9
 80048b4:	414b      	adcs	r3, r1
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048c4:	4659      	mov	r1, fp
 80048c6:	00cb      	lsls	r3, r1, #3
 80048c8:	4651      	mov	r1, sl
 80048ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ce:	4651      	mov	r1, sl
 80048d0:	00ca      	lsls	r2, r1, #3
 80048d2:	4610      	mov	r0, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	4603      	mov	r3, r0
 80048d8:	4642      	mov	r2, r8
 80048da:	189b      	adds	r3, r3, r2
 80048dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048e0:	464b      	mov	r3, r9
 80048e2:	460a      	mov	r2, r1
 80048e4:	eb42 0303 	adc.w	r3, r2, r3
 80048e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004900:	460b      	mov	r3, r1
 8004902:	18db      	adds	r3, r3, r3
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
 8004906:	4613      	mov	r3, r2
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004912:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004916:	f7fb fcbb 	bl	8000290 <__aeabi_uldivmod>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <UART_SetConfig+0x2d4>)
 8004920:	fba3 1302 	umull	r1, r3, r3, r2
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	2164      	movs	r1, #100	; 0x64
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	3332      	adds	r3, #50	; 0x32
 8004932:	4a08      	ldr	r2, [pc, #32]	; (8004954 <UART_SetConfig+0x2d4>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	f003 0207 	and.w	r2, r3, #7
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4422      	add	r2, r4
 8004946:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004948:	e105      	b.n	8004b56 <UART_SetConfig+0x4d6>
 800494a:	bf00      	nop
 800494c:	40011000 	.word	0x40011000
 8004950:	40011400 	.word	0x40011400
 8004954:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495c:	2200      	movs	r2, #0
 800495e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004962:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004966:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800496a:	4642      	mov	r2, r8
 800496c:	464b      	mov	r3, r9
 800496e:	1891      	adds	r1, r2, r2
 8004970:	6239      	str	r1, [r7, #32]
 8004972:	415b      	adcs	r3, r3
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
 8004976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800497a:	4641      	mov	r1, r8
 800497c:	1854      	adds	r4, r2, r1
 800497e:	4649      	mov	r1, r9
 8004980:	eb43 0501 	adc.w	r5, r3, r1
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	00eb      	lsls	r3, r5, #3
 800498e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004992:	00e2      	lsls	r2, r4, #3
 8004994:	4614      	mov	r4, r2
 8004996:	461d      	mov	r5, r3
 8004998:	4643      	mov	r3, r8
 800499a:	18e3      	adds	r3, r4, r3
 800499c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049a0:	464b      	mov	r3, r9
 80049a2:	eb45 0303 	adc.w	r3, r5, r3
 80049a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049c6:	4629      	mov	r1, r5
 80049c8:	008b      	lsls	r3, r1, #2
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d0:	4621      	mov	r1, r4
 80049d2:	008a      	lsls	r2, r1, #2
 80049d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049d8:	f7fb fc5a 	bl	8000290 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4b60      	ldr	r3, [pc, #384]	; (8004b64 <UART_SetConfig+0x4e4>)
 80049e2:	fba3 2302 	umull	r2, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	011c      	lsls	r4, r3, #4
 80049ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	1891      	adds	r1, r2, r2
 8004a02:	61b9      	str	r1, [r7, #24]
 8004a04:	415b      	adcs	r3, r3
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	1851      	adds	r1, r2, r1
 8004a10:	6139      	str	r1, [r7, #16]
 8004a12:	4649      	mov	r1, r9
 8004a14:	414b      	adcs	r3, r1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a24:	4659      	mov	r1, fp
 8004a26:	00cb      	lsls	r3, r1, #3
 8004a28:	4651      	mov	r1, sl
 8004a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2e:	4651      	mov	r1, sl
 8004a30:	00ca      	lsls	r2, r1, #3
 8004a32:	4610      	mov	r0, r2
 8004a34:	4619      	mov	r1, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	4642      	mov	r2, r8
 8004a3a:	189b      	adds	r3, r3, r2
 8004a3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a40:	464b      	mov	r3, r9
 8004a42:	460a      	mov	r2, r1
 8004a44:	eb42 0303 	adc.w	r3, r2, r3
 8004a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a64:	4649      	mov	r1, r9
 8004a66:	008b      	lsls	r3, r1, #2
 8004a68:	4641      	mov	r1, r8
 8004a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a6e:	4641      	mov	r1, r8
 8004a70:	008a      	lsls	r2, r1, #2
 8004a72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a76:	f7fb fc0b 	bl	8000290 <__aeabi_uldivmod>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <UART_SetConfig+0x4e4>)
 8004a80:	fba3 1302 	umull	r1, r3, r3, r2
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	2164      	movs	r1, #100	; 0x64
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	3332      	adds	r3, #50	; 0x32
 8004a92:	4a34      	ldr	r2, [pc, #208]	; (8004b64 <UART_SetConfig+0x4e4>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a9e:	441c      	add	r4, r3
 8004aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8004aa8:	677a      	str	r2, [r7, #116]	; 0x74
 8004aaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004aae:	4642      	mov	r2, r8
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	1891      	adds	r1, r2, r2
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	415b      	adcs	r3, r3
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004abe:	4641      	mov	r1, r8
 8004ac0:	1851      	adds	r1, r2, r1
 8004ac2:	6039      	str	r1, [r7, #0]
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	414b      	adcs	r3, r1
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ad6:	4659      	mov	r1, fp
 8004ad8:	00cb      	lsls	r3, r1, #3
 8004ada:	4651      	mov	r1, sl
 8004adc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae0:	4651      	mov	r1, sl
 8004ae2:	00ca      	lsls	r2, r1, #3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4642      	mov	r2, r8
 8004aec:	189b      	adds	r3, r3, r2
 8004aee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004af0:	464b      	mov	r3, r9
 8004af2:	460a      	mov	r2, r1
 8004af4:	eb42 0303 	adc.w	r3, r2, r3
 8004af8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	663b      	str	r3, [r7, #96]	; 0x60
 8004b04:	667a      	str	r2, [r7, #100]	; 0x64
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b12:	4649      	mov	r1, r9
 8004b14:	008b      	lsls	r3, r1, #2
 8004b16:	4641      	mov	r1, r8
 8004b18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	008a      	lsls	r2, r1, #2
 8004b20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b24:	f7fb fbb4 	bl	8000290 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <UART_SetConfig+0x4e4>)
 8004b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	2164      	movs	r1, #100	; 0x64
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	3332      	adds	r3, #50	; 0x32
 8004b40:	4a08      	ldr	r2, [pc, #32]	; (8004b64 <UART_SetConfig+0x4e4>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	f003 020f 	and.w	r2, r3, #15
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4422      	add	r2, r4
 8004b54:	609a      	str	r2, [r3, #8]
}
 8004b56:	bf00      	nop
 8004b58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	51eb851f 	.word	0x51eb851f

08004b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b68:	b084      	sub	sp, #16
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	f107 001c 	add.w	r0, r7, #28
 8004b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d122      	bne.n	8004bc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d105      	bne.n	8004bba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f001 fbee 	bl	800639c <USB_CoreReset>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	73fb      	strb	r3, [r7, #15]
 8004bc4:	e01a      	b.n	8004bfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f001 fbe2 	bl	800639c <USB_CoreReset>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38
 8004bee:	e005      	b.n	8004bfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d10b      	bne.n	8004c1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f043 0206 	orr.w	r2, r3, #6
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f043 0220 	orr.w	r2, r3, #32
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c26:	b004      	add	sp, #16
 8004c28:	4770      	bx	lr
	...

08004c2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	4613      	mov	r3, r2
 8004c38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d165      	bne.n	8004d0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4a41      	ldr	r2, [pc, #260]	; (8004d48 <USB_SetTurnaroundTime+0x11c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d906      	bls.n	8004c56 <USB_SetTurnaroundTime+0x2a>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4a40      	ldr	r2, [pc, #256]	; (8004d4c <USB_SetTurnaroundTime+0x120>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d202      	bcs.n	8004c56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c50:	230f      	movs	r3, #15
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	e062      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4a3c      	ldr	r2, [pc, #240]	; (8004d4c <USB_SetTurnaroundTime+0x120>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d306      	bcc.n	8004c6c <USB_SetTurnaroundTime+0x40>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a3b      	ldr	r2, [pc, #236]	; (8004d50 <USB_SetTurnaroundTime+0x124>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d202      	bcs.n	8004c6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c66:	230e      	movs	r3, #14
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e057      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4a38      	ldr	r2, [pc, #224]	; (8004d50 <USB_SetTurnaroundTime+0x124>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d306      	bcc.n	8004c82 <USB_SetTurnaroundTime+0x56>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a37      	ldr	r2, [pc, #220]	; (8004d54 <USB_SetTurnaroundTime+0x128>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d202      	bcs.n	8004c82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c7c:	230d      	movs	r3, #13
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e04c      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4a33      	ldr	r2, [pc, #204]	; (8004d54 <USB_SetTurnaroundTime+0x128>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d306      	bcc.n	8004c98 <USB_SetTurnaroundTime+0x6c>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4a32      	ldr	r2, [pc, #200]	; (8004d58 <USB_SetTurnaroundTime+0x12c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d802      	bhi.n	8004c98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c92:	230c      	movs	r3, #12
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e041      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4a2f      	ldr	r2, [pc, #188]	; (8004d58 <USB_SetTurnaroundTime+0x12c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d906      	bls.n	8004cae <USB_SetTurnaroundTime+0x82>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a2e      	ldr	r2, [pc, #184]	; (8004d5c <USB_SetTurnaroundTime+0x130>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d802      	bhi.n	8004cae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ca8:	230b      	movs	r3, #11
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e036      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a2a      	ldr	r2, [pc, #168]	; (8004d5c <USB_SetTurnaroundTime+0x130>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d906      	bls.n	8004cc4 <USB_SetTurnaroundTime+0x98>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4a29      	ldr	r2, [pc, #164]	; (8004d60 <USB_SetTurnaroundTime+0x134>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d802      	bhi.n	8004cc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e02b      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a26      	ldr	r2, [pc, #152]	; (8004d60 <USB_SetTurnaroundTime+0x134>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d906      	bls.n	8004cda <USB_SetTurnaroundTime+0xae>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <USB_SetTurnaroundTime+0x138>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d202      	bcs.n	8004cda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004cd4:	2309      	movs	r3, #9
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e020      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a21      	ldr	r2, [pc, #132]	; (8004d64 <USB_SetTurnaroundTime+0x138>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d306      	bcc.n	8004cf0 <USB_SetTurnaroundTime+0xc4>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a20      	ldr	r2, [pc, #128]	; (8004d68 <USB_SetTurnaroundTime+0x13c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d802      	bhi.n	8004cf0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004cea:	2308      	movs	r3, #8
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e015      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <USB_SetTurnaroundTime+0x13c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d906      	bls.n	8004d06 <USB_SetTurnaroundTime+0xda>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <USB_SetTurnaroundTime+0x140>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d202      	bcs.n	8004d06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d00:	2307      	movs	r3, #7
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e00a      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d06:	2306      	movs	r3, #6
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e007      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d12:	2309      	movs	r3, #9
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e001      	b.n	8004d1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d18:	2309      	movs	r3, #9
 8004d1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	029b      	lsls	r3, r3, #10
 8004d30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	00d8acbf 	.word	0x00d8acbf
 8004d4c:	00e4e1c0 	.word	0x00e4e1c0
 8004d50:	00f42400 	.word	0x00f42400
 8004d54:	01067380 	.word	0x01067380
 8004d58:	011a499f 	.word	0x011a499f
 8004d5c:	01312cff 	.word	0x01312cff
 8004d60:	014ca43f 	.word	0x014ca43f
 8004d64:	016e3600 	.word	0x016e3600
 8004d68:	01a6ab1f 	.word	0x01a6ab1f
 8004d6c:	01e84800 	.word	0x01e84800

08004d70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f043 0201 	orr.w	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f023 0201 	bic.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d115      	bne.n	8004e02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004de2:	2001      	movs	r0, #1
 8004de4:	f7fc f88a 	bl	8000efc <HAL_Delay>
      ms++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f001 fa45 	bl	800627e <USB_GetMode>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d01e      	beq.n	8004e38 <USB_SetCurrentMode+0x84>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b31      	cmp	r3, #49	; 0x31
 8004dfe:	d9f0      	bls.n	8004de2 <USB_SetCurrentMode+0x2e>
 8004e00:	e01a      	b.n	8004e38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d115      	bne.n	8004e34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e14:	2001      	movs	r0, #1
 8004e16:	f7fc f871 	bl	8000efc <HAL_Delay>
      ms++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 fa2c 	bl	800627e <USB_GetMode>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <USB_SetCurrentMode+0x84>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b31      	cmp	r3, #49	; 0x31
 8004e30:	d9f0      	bls.n	8004e14 <USB_SetCurrentMode+0x60>
 8004e32:	e001      	b.n	8004e38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e005      	b.n	8004e44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b32      	cmp	r3, #50	; 0x32
 8004e3c:	d101      	bne.n	8004e42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e009      	b.n	8004e80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	3340      	adds	r3, #64	; 0x40
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b0e      	cmp	r3, #14
 8004e84:	d9f2      	bls.n	8004e6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11c      	bne.n	8004ec6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e9a:	f043 0302 	orr.w	r3, r3, #2
 8004e9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ec4:	e00b      	b.n	8004ede <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef8:	461a      	mov	r2, r3
 8004efa:	680b      	ldr	r3, [r1, #0]
 8004efc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d10c      	bne.n	8004f1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f965 	bl	80051dc <USB_SetDevSpeed>
 8004f12:	e008      	b.n	8004f26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f14:	2101      	movs	r1, #1
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f960 	bl	80051dc <USB_SetDevSpeed>
 8004f1c:	e003      	b.n	8004f26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f1e:	2103      	movs	r1, #3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f95b 	bl	80051dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f26:	2110      	movs	r1, #16
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f8f3 	bl	8005114 <USB_FlushTxFifo>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f91f 	bl	800517c <USB_FlushRxFifo>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2300      	movs	r3, #0
 8004f52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	461a      	mov	r2, r3
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	e043      	b.n	8004ffa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f88:	d118      	bne.n	8004fbc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	e013      	b.n	8004fce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e008      	b.n	8004fce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fec:	461a      	mov	r2, r3
 8004fee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d3b7      	bcc.n	8004f72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005002:	2300      	movs	r3, #0
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	e043      	b.n	8005090 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800501a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800501e:	d118      	bne.n	8005052 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	461a      	mov	r2, r3
 8005034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e013      	b.n	8005064 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	461a      	mov	r2, r3
 800504a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	e008      	b.n	8005064 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505e:	461a      	mov	r2, r3
 8005060:	2300      	movs	r3, #0
 8005062:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005070:	461a      	mov	r2, r3
 8005072:	2300      	movs	r3, #0
 8005074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005082:	461a      	mov	r2, r3
 8005084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005088:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	3301      	adds	r3, #1
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	429a      	cmp	r2, r3
 8005096:	d3b7      	bcc.n	8005008 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f043 0210 	orr.w	r2, r3, #16
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <USB_DevInit+0x2c4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f043 0208 	orr.w	r2, r3, #8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050f8:	f043 0304 	orr.w	r3, r3, #4
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800510c:	b004      	add	sp, #16
 800510e:	4770      	bx	lr
 8005110:	803c3800 	.word	0x803c3800

08005114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4a13      	ldr	r2, [pc, #76]	; (8005178 <USB_FlushTxFifo+0x64>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e01b      	b.n	800516c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	daf2      	bge.n	8005122 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	019b      	lsls	r3, r3, #6
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4a08      	ldr	r2, [pc, #32]	; (8005178 <USB_FlushTxFifo+0x64>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e006      	b.n	800516c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	d0f0      	beq.n	800514c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	00030d40 	.word	0x00030d40

0800517c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a11      	ldr	r2, [pc, #68]	; (80051d8 <USB_FlushRxFifo+0x5c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e018      	b.n	80051cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	daf2      	bge.n	8005188 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2210      	movs	r2, #16
 80051aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3301      	adds	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <USB_FlushRxFifo+0x5c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e006      	b.n	80051cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d0f0      	beq.n	80051ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	00030d40 	.word	0x00030d40

080051dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	68f9      	ldr	r1, [r7, #12]
 80051f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800520e:	b480      	push	{r7}
 8005210:	b087      	sub	sp, #28
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 0306 	and.w	r3, r3, #6
 8005226:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d102      	bne.n	8005234 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]
 8005232:	e00a      	b.n	800524a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d002      	beq.n	8005240 <USB_GetDevSpeed+0x32>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b06      	cmp	r3, #6
 800523e:	d102      	bne.n	8005246 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005240:	2302      	movs	r3, #2
 8005242:	75fb      	strb	r3, [r7, #23]
 8005244:	e001      	b.n	800524a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005246:	230f      	movs	r3, #15
 8005248:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d13a      	bne.n	80052ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	2101      	movs	r1, #1
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	b29b      	uxth	r3, r3
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005292:	4313      	orrs	r3, r2
 8005294:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d155      	bne.n	8005358 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	791b      	ldrb	r3, [r3, #4]
 80052c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	059b      	lsls	r3, r3, #22
 80052ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052d0:	4313      	orrs	r3, r2
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	e036      	b.n	8005358 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	2101      	movs	r1, #1
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005308:	4313      	orrs	r3, r2
 800530a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11a      	bne.n	8005358 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	791b      	ldrb	r3, [r3, #4]
 800533c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800533e:	430b      	orrs	r3, r1
 8005340:	4313      	orrs	r3, r2
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005356:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d161      	bne.n	8005448 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539a:	d11f      	bne.n	80053dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	2101      	movs	r1, #1
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053fc:	4013      	ands	r3, r2
 80053fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	2101      	movs	r1, #1
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	b29b      	uxth	r3, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005420:	4013      	ands	r3, r2
 8005422:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	0159      	lsls	r1, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	440b      	add	r3, r1
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	4619      	mov	r1, r3
 8005440:	4b35      	ldr	r3, [pc, #212]	; (8005518 <USB_DeactivateEndpoint+0x1b0>)
 8005442:	4013      	ands	r3, r2
 8005444:	600b      	str	r3, [r1, #0]
 8005446:	e060      	b.n	800550a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800545a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800545e:	d11f      	bne.n	80054a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800547e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800549e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	2101      	movs	r1, #1
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	43db      	mvns	r3, r3
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c0:	4013      	ands	r3, r2
 80054c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f303 	lsl.w	r3, r1, r3
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	43db      	mvns	r3, r3
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e4:	4013      	ands	r3, r2
 80054e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	0159      	lsls	r1, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	440b      	add	r3, r1
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	4619      	mov	r1, r3
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <USB_DeactivateEndpoint+0x1b4>)
 8005506:	4013      	ands	r3, r2
 8005508:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	ec337800 	.word	0xec337800
 800551c:	eff37800 	.word	0xeff37800

08005520 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	2b01      	cmp	r3, #1
 800553e:	f040 815c 	bne.w	80057fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d132      	bne.n	80055b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800556c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800558c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a8:	0cdb      	lsrs	r3, r3, #19
 80055aa:	04db      	lsls	r3, r3, #19
 80055ac:	6113      	str	r3, [r2, #16]
 80055ae:	e074      	b.n	800569a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ca:	0cdb      	lsrs	r3, r3, #19
 80055cc:	04db      	lsls	r3, r3, #19
 80055ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005600:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6999      	ldr	r1, [r3, #24]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	440b      	add	r3, r1
 800560c:	1e59      	subs	r1, r3, #1
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	fbb1 f3f3 	udiv	r3, r1, r3
 8005616:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005618:	4b9d      	ldr	r3, [pc, #628]	; (8005890 <USB_EPStartXfer+0x370>)
 800561a:	400b      	ands	r3, r1
 800561c:	69b9      	ldr	r1, [r7, #24]
 800561e:	0148      	lsls	r0, r1, #5
 8005620:	69f9      	ldr	r1, [r7, #28]
 8005622:	4401      	add	r1, r0
 8005624:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005628:	4313      	orrs	r3, r2
 800562a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005642:	69b9      	ldr	r1, [r7, #24]
 8005644:	0148      	lsls	r0, r1, #5
 8005646:	69f9      	ldr	r1, [r7, #28]
 8005648:	4401      	add	r1, r0
 800564a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800564e:	4313      	orrs	r3, r2
 8005650:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	791b      	ldrb	r3, [r3, #4]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d11f      	bne.n	800569a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005674:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005678:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005698:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d14b      	bne.n	8005738 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d009      	beq.n	80056bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	791b      	ldrb	r3, [r3, #4]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d128      	bne.n	8005716 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d110      	bne.n	80056f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e00f      	b.n	8005716 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005730:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e133      	b.n	80059a0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005756:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	791b      	ldrb	r3, [r3, #4]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d015      	beq.n	800578c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 811b 	beq.w	80059a0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	2101      	movs	r1, #1
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	69f9      	ldr	r1, [r7, #28]
 8005782:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005786:	4313      	orrs	r3, r2
 8005788:	634b      	str	r3, [r1, #52]	; 0x34
 800578a:	e109      	b.n	80059a0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d110      	bne.n	80057be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	e00f      	b.n	80057de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6919      	ldr	r1, [r3, #16]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	b298      	uxth	r0, r3
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	4603      	mov	r3, r0
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fade 	bl	8005db4 <USB_WritePacket>
 80057f8:	e0d2      	b.n	80059a0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005814:	0cdb      	lsrs	r3, r3, #19
 8005816:	04db      	lsls	r3, r3, #19
 8005818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800583c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d126      	bne.n	8005894 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	0148      	lsls	r0, r1, #5
 8005860:	69f9      	ldr	r1, [r7, #28]
 8005862:	4401      	add	r1, r0
 8005864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005868:	4313      	orrs	r3, r2
 800586a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800588a:	6113      	str	r3, [r2, #16]
 800588c:	e03a      	b.n	8005904 <USB_EPStartXfer+0x3e4>
 800588e:	bf00      	nop
 8005890:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	699a      	ldr	r2, [r3, #24]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4413      	add	r3, r2
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	8afa      	ldrh	r2, [r7, #22]
 80058b0:	fb03 f202 	mul.w	r2, r3, r2
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	8afb      	ldrh	r3, [r7, #22]
 80058c8:	04d9      	lsls	r1, r3, #19
 80058ca:	4b38      	ldr	r3, [pc, #224]	; (80059ac <USB_EPStartXfer+0x48c>)
 80058cc:	400b      	ands	r3, r1
 80058ce:	69b9      	ldr	r1, [r7, #24]
 80058d0:	0148      	lsls	r0, r1, #5
 80058d2:	69f9      	ldr	r1, [r7, #28]
 80058d4:	4401      	add	r1, r0
 80058d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058da:	4313      	orrs	r3, r2
 80058dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f4:	69b9      	ldr	r1, [r7, #24]
 80058f6:	0148      	lsls	r0, r1, #5
 80058f8:	69f9      	ldr	r1, [r7, #28]
 80058fa:	4401      	add	r1, r0
 80058fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005900:	4313      	orrs	r3, r2
 8005902:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d10d      	bne.n	8005926 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6919      	ldr	r1, [r3, #16]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	460a      	mov	r2, r1
 8005924:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	791b      	ldrb	r3, [r3, #4]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d128      	bne.n	8005980 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e00f      	b.n	8005980 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800599e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	1ff80000 	.word	0x1ff80000

080059b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	f040 80ce 	bne.w	8005b6e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d132      	bne.n	8005a40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a38:	0cdb      	lsrs	r3, r3, #19
 8005a3a:	04db      	lsls	r3, r3, #19
 8005a3c:	6113      	str	r3, [r2, #16]
 8005a3e:	e04e      	b.n	8005ade <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5a:	0cdb      	lsrs	r3, r3, #19
 8005a5c:	04db      	lsls	r3, r3, #19
 8005a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d903      	bls.n	8005a98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ace:	6939      	ldr	r1, [r7, #16]
 8005ad0:	0148      	lsls	r0, r1, #5
 8005ad2:	6979      	ldr	r1, [r7, #20]
 8005ad4:	4401      	add	r1, r0
 8005ad6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ada:	4313      	orrs	r3, r2
 8005adc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d11e      	bne.n	8005b22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d009      	beq.n	8005b00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	461a      	mov	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e097      	b.n	8005c52 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8083 	beq.w	8005c52 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b62:	6979      	ldr	r1, [r7, #20]
 8005b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	634b      	str	r3, [r1, #52]	; 0x34
 8005b6c:	e071      	b.n	8005c52 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b88:	0cdb      	lsrs	r3, r3, #19
 8005b8a:	04db      	lsls	r3, r3, #19
 8005b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005be8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c00:	6939      	ldr	r1, [r7, #16]
 8005c02:	0148      	lsls	r0, r1, #5
 8005c04:	6979      	ldr	r1, [r7, #20]
 8005c06:	4401      	add	r1, r0
 8005c08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d10d      	bne.n	8005c32 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6919      	ldr	r1, [r3, #16]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	460a      	mov	r2, r1
 8005c30:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d14a      	bne.n	8005d14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c96:	f040 8086 	bne.w	8005da6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	7812      	ldrb	r2, [r2, #0]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	7812      	ldrb	r2, [r2, #0]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d902      	bls.n	8005cf8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8005cf6:	e056      	b.n	8005da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d10:	d0e7      	beq.n	8005ce2 <USB_EPStopXfer+0x82>
 8005d12:	e048      	b.n	8005da6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d2c:	d13b      	bne.n	8005da6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	7812      	ldrb	r2, [r2, #0]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	7812      	ldrb	r2, [r2, #0]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d902      	bls.n	8005d8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
          break;
 8005d8a:	e00c      	b.n	8005da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da4:	d0e7      	beq.n	8005d76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b089      	sub	sp, #36	; 0x24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	71fb      	strb	r3, [r7, #7]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d123      	bne.n	8005e22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dda:	88bb      	ldrh	r3, [r7, #4]
 8005ddc:	3303      	adds	r3, #3
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	e018      	b.n	8005e1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	031a      	lsls	r2, r3, #12
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df4:	461a      	mov	r2, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3301      	adds	r3, #1
 8005e06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	3301      	adds	r3, #1
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d3e2      	bcc.n	8005de8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3724      	adds	r7, #36	; 0x24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b08b      	sub	sp, #44	; 0x2c
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	089b      	lsrs	r3, r3, #2
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	e014      	b.n	8005e86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	3301      	adds	r3, #1
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	3301      	adds	r3, #1
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	3301      	adds	r3, #1
 8005e84:	623b      	str	r3, [r7, #32]
 8005e86:	6a3a      	ldr	r2, [r7, #32]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3e6      	bcc.n	8005e5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e8e:	8bfb      	ldrh	r3, [r7, #30]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01e      	beq.n	8005ed2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f107 0310 	add.w	r3, r7, #16
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	701a      	strb	r2, [r3, #0]
      i++;
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ec6:	8bfb      	ldrh	r3, [r7, #30]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ecc:	8bfb      	ldrh	r3, [r7, #30]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1ea      	bne.n	8005ea8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	372c      	adds	r7, #44	; 0x2c
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d12c      	bne.n	8005f56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	db12      	blt.n	8005f34 <USB_EPSetStall+0x54>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00f      	beq.n	8005f34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	e02b      	b.n	8005fae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	db12      	blt.n	8005f8e <USB_EPSetStall+0xae>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00f      	beq.n	8005f8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d128      	bne.n	800602a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ff6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	791b      	ldrb	r3, [r3, #4]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d003      	beq.n	8006008 <USB_EPClearStall+0x4c>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	791b      	ldrb	r3, [r3, #4]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d138      	bne.n	800607a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	440a      	add	r2, r1
 800601e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	e027      	b.n	800607a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	440a      	add	r2, r1
 8006040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006048:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	791b      	ldrb	r3, [r3, #4]
 800604e:	2b03      	cmp	r3, #3
 8006050:	d003      	beq.n	800605a <USB_EPClearStall+0x9e>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	791b      	ldrb	r3, [r3, #4]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d10f      	bne.n	800607a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006078:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060c2:	4313      	orrs	r3, r2
 80060c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060ee:	f023 0303 	bic.w	r3, r3, #3
 80060f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006102:	f023 0302 	bic.w	r3, r3, #2
 8006106:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006130:	f023 0303 	bic.w	r3, r3, #3
 8006134:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006144:	f043 0302 	orr.w	r3, r3, #2
 8006148:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4013      	ands	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006170:	68fb      	ldr	r3, [r7, #12]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	4013      	ands	r3, r2
 80061a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	0c1b      	lsrs	r3, r3, #16
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	4013      	ands	r3, r2
 80061d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	b29b      	uxth	r3, r3
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	460b      	mov	r3, r1
 80061f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4013      	ands	r3, r2
 8006212:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006214:	68bb      	ldr	r3, [r7, #8]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006222:	b480      	push	{r7}
 8006224:	b087      	sub	sp, #28
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	460b      	mov	r3, r1
 800622c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006244:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	fa22 f303 	lsr.w	r3, r2, r3
 8006252:	01db      	lsls	r3, r3, #7
 8006254:	b2db      	uxtb	r3, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4013      	ands	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006270:	68bb      	ldr	r3, [r7, #8]
}
 8006272:	4618      	mov	r0, r3
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f003 0301 	and.w	r3, r3, #1
}
 800628e:	4618      	mov	r0, r3
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062b8:	f023 0307 	bic.w	r3, r3, #7
 80062bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	460b      	mov	r3, r1
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	333c      	adds	r3, #60	; 0x3c
 80062f6:	3304      	adds	r3, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4a26      	ldr	r2, [pc, #152]	; (8006398 <USB_EP0_OutStart+0xb8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d90a      	bls.n	800631a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006314:	d101      	bne.n	800631a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	e037      	b.n	800638a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006348:	f043 0318 	orr.w	r3, r3, #24
 800634c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006360:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006362:	7afb      	ldrb	r3, [r7, #11]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d10f      	bne.n	8006388 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636e:	461a      	mov	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006382:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	4f54300a 	.word	0x4f54300a

0800639c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4a13      	ldr	r2, [pc, #76]	; (8006400 <USB_CoreReset+0x64>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d901      	bls.n	80063ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e01b      	b.n	80063f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	daf2      	bge.n	80063a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f043 0201 	orr.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3301      	adds	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a09      	ldr	r2, [pc, #36]	; (8006400 <USB_CoreReset+0x64>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d901      	bls.n	80063e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e006      	b.n	80063f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d0f0      	beq.n	80063d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	00030d40 	.word	0x00030d40

08006404 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006410:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006414:	f002 fc8a 	bl	8008d2c <USBD_static_malloc>
 8006418:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	32b0      	adds	r2, #176	; 0xb0
 800642a:	2100      	movs	r1, #0
 800642c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006430:	2302      	movs	r3, #2
 8006432:	e0d4      	b.n	80065de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006434:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006438:	2100      	movs	r1, #0
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f002 fce4 	bl	8008e08 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	32b0      	adds	r2, #176	; 0xb0
 800644a:	68f9      	ldr	r1, [r7, #12]
 800644c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	32b0      	adds	r2, #176	; 0xb0
 800645a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	7c1b      	ldrb	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d138      	bne.n	80064de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800646c:	4b5e      	ldr	r3, [pc, #376]	; (80065e8 <USBD_CDC_Init+0x1e4>)
 800646e:	7819      	ldrb	r1, [r3, #0]
 8006470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006474:	2202      	movs	r2, #2
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f002 fb35 	bl	8008ae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800647c:	4b5a      	ldr	r3, [pc, #360]	; (80065e8 <USBD_CDC_Init+0x1e4>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f003 020f 	and.w	r2, r3, #15
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	3324      	adds	r3, #36	; 0x24
 8006492:	2201      	movs	r2, #1
 8006494:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006496:	4b55      	ldr	r3, [pc, #340]	; (80065ec <USBD_CDC_Init+0x1e8>)
 8006498:	7819      	ldrb	r1, [r3, #0]
 800649a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800649e:	2202      	movs	r2, #2
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f002 fb20 	bl	8008ae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064a6:	4b51      	ldr	r3, [pc, #324]	; (80065ec <USBD_CDC_Init+0x1e8>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f003 020f 	and.w	r2, r3, #15
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064be:	2201      	movs	r2, #1
 80064c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80064c2:	4b4b      	ldr	r3, [pc, #300]	; (80065f0 <USBD_CDC_Init+0x1ec>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f003 020f 	and.w	r2, r3, #15
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	3326      	adds	r3, #38	; 0x26
 80064d8:	2210      	movs	r2, #16
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	e035      	b.n	800654a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064de:	4b42      	ldr	r3, [pc, #264]	; (80065e8 <USBD_CDC_Init+0x1e4>)
 80064e0:	7819      	ldrb	r1, [r3, #0]
 80064e2:	2340      	movs	r3, #64	; 0x40
 80064e4:	2202      	movs	r2, #2
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f002 fafd 	bl	8008ae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064ec:	4b3e      	ldr	r3, [pc, #248]	; (80065e8 <USBD_CDC_Init+0x1e4>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	3324      	adds	r3, #36	; 0x24
 8006502:	2201      	movs	r2, #1
 8006504:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006506:	4b39      	ldr	r3, [pc, #228]	; (80065ec <USBD_CDC_Init+0x1e8>)
 8006508:	7819      	ldrb	r1, [r3, #0]
 800650a:	2340      	movs	r3, #64	; 0x40
 800650c:	2202      	movs	r2, #2
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f002 fae9 	bl	8008ae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006514:	4b35      	ldr	r3, [pc, #212]	; (80065ec <USBD_CDC_Init+0x1e8>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	f003 020f 	and.w	r2, r3, #15
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800652c:	2201      	movs	r2, #1
 800652e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006530:	4b2f      	ldr	r3, [pc, #188]	; (80065f0 <USBD_CDC_Init+0x1ec>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	440b      	add	r3, r1
 8006544:	3326      	adds	r3, #38	; 0x26
 8006546:	2210      	movs	r2, #16
 8006548:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800654a:	4b29      	ldr	r3, [pc, #164]	; (80065f0 <USBD_CDC_Init+0x1ec>)
 800654c:	7819      	ldrb	r1, [r3, #0]
 800654e:	2308      	movs	r3, #8
 8006550:	2203      	movs	r2, #3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f002 fac7 	bl	8008ae6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006558:	4b25      	ldr	r3, [pc, #148]	; (80065f0 <USBD_CDC_Init+0x1ec>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f003 020f 	and.w	r2, r3, #15
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	3324      	adds	r3, #36	; 0x24
 800656e:	2201      	movs	r2, #1
 8006570:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	33b0      	adds	r3, #176	; 0xb0
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80065a8:	2302      	movs	r3, #2
 80065aa:	e018      	b.n	80065de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	7c1b      	ldrb	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065b4:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <USBD_CDC_Init+0x1e8>)
 80065b6:	7819      	ldrb	r1, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f002 fb7e 	bl	8008cc4 <USBD_LL_PrepareReceive>
 80065c8:	e008      	b.n	80065dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065ca:	4b08      	ldr	r3, [pc, #32]	; (80065ec <USBD_CDC_Init+0x1e8>)
 80065cc:	7819      	ldrb	r1, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065d4:	2340      	movs	r3, #64	; 0x40
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f002 fb74 	bl	8008cc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000093 	.word	0x20000093
 80065ec:	20000094 	.word	0x20000094
 80065f0:	20000095 	.word	0x20000095

080065f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006600:	4b3a      	ldr	r3, [pc, #232]	; (80066ec <USBD_CDC_DeInit+0xf8>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f002 fa93 	bl	8008b32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800660c:	4b37      	ldr	r3, [pc, #220]	; (80066ec <USBD_CDC_DeInit+0xf8>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f003 020f 	and.w	r2, r3, #15
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	440b      	add	r3, r1
 8006620:	3324      	adds	r3, #36	; 0x24
 8006622:	2200      	movs	r2, #0
 8006624:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006626:	4b32      	ldr	r3, [pc, #200]	; (80066f0 <USBD_CDC_DeInit+0xfc>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f002 fa80 	bl	8008b32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006632:	4b2f      	ldr	r3, [pc, #188]	; (80066f0 <USBD_CDC_DeInit+0xfc>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f003 020f 	and.w	r2, r3, #15
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800664a:	2200      	movs	r2, #0
 800664c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800664e:	4b29      	ldr	r3, [pc, #164]	; (80066f4 <USBD_CDC_DeInit+0x100>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f002 fa6c 	bl	8008b32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800665a:	4b26      	ldr	r3, [pc, #152]	; (80066f4 <USBD_CDC_DeInit+0x100>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f003 020f 	and.w	r2, r3, #15
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	3324      	adds	r3, #36	; 0x24
 8006670:	2200      	movs	r2, #0
 8006672:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006674:	4b1f      	ldr	r3, [pc, #124]	; (80066f4 <USBD_CDC_DeInit+0x100>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	f003 020f 	and.w	r2, r3, #15
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	3326      	adds	r3, #38	; 0x26
 800668a:	2200      	movs	r2, #0
 800668c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	32b0      	adds	r2, #176	; 0xb0
 8006698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01f      	beq.n	80066e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	33b0      	adds	r3, #176	; 0xb0
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	32b0      	adds	r2, #176	; 0xb0
 80066be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f002 fb40 	bl	8008d48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	32b0      	adds	r2, #176	; 0xb0
 80066d2:	2100      	movs	r1, #0
 80066d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000093 	.word	0x20000093
 80066f0:	20000094 	.word	0x20000094
 80066f4:	20000095 	.word	0x20000095

080066f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	32b0      	adds	r2, #176	; 0xb0
 800670c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006710:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006724:	2303      	movs	r3, #3
 8006726:	e0bf      	b.n	80068a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006730:	2b00      	cmp	r3, #0
 8006732:	d050      	beq.n	80067d6 <USBD_CDC_Setup+0xde>
 8006734:	2b20      	cmp	r3, #32
 8006736:	f040 80af 	bne.w	8006898 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	88db      	ldrh	r3, [r3, #6]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d03a      	beq.n	80067b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	b25b      	sxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	da1b      	bge.n	8006784 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	33b0      	adds	r3, #176	; 0xb0
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006762:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	88d2      	ldrh	r2, [r2, #6]
 8006768:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	88db      	ldrh	r3, [r3, #6]
 800676e:	2b07      	cmp	r3, #7
 8006770:	bf28      	it	cs
 8006772:	2307      	movcs	r3, #7
 8006774:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	89fa      	ldrh	r2, [r7, #14]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fd89 	bl	8008294 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006782:	e090      	b.n	80068a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	785a      	ldrb	r2, [r3, #1]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	88db      	ldrh	r3, [r3, #6]
 8006792:	2b3f      	cmp	r3, #63	; 0x3f
 8006794:	d803      	bhi.n	800679e <USBD_CDC_Setup+0xa6>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	88db      	ldrh	r3, [r3, #6]
 800679a:	b2da      	uxtb	r2, r3
 800679c:	e000      	b.n	80067a0 <USBD_CDC_Setup+0xa8>
 800679e:	2240      	movs	r2, #64	; 0x40
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80067a6:	6939      	ldr	r1, [r7, #16]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80067ae:	461a      	mov	r2, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 fd9b 	bl	80082ec <USBD_CtlPrepareRx>
      break;
 80067b6:	e076      	b.n	80068a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	33b0      	adds	r3, #176	; 0xb0
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	7850      	ldrb	r0, [r2, #1]
 80067ce:	2200      	movs	r2, #0
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	4798      	blx	r3
      break;
 80067d4:	e067      	b.n	80068a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	2b0b      	cmp	r3, #11
 80067dc:	d851      	bhi.n	8006882 <USBD_CDC_Setup+0x18a>
 80067de:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <USBD_CDC_Setup+0xec>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006815 	.word	0x08006815
 80067e8:	08006891 	.word	0x08006891
 80067ec:	08006883 	.word	0x08006883
 80067f0:	08006883 	.word	0x08006883
 80067f4:	08006883 	.word	0x08006883
 80067f8:	08006883 	.word	0x08006883
 80067fc:	08006883 	.word	0x08006883
 8006800:	08006883 	.word	0x08006883
 8006804:	08006883 	.word	0x08006883
 8006808:	08006883 	.word	0x08006883
 800680c:	0800683f 	.word	0x0800683f
 8006810:	08006869 	.word	0x08006869
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b03      	cmp	r3, #3
 800681e:	d107      	bne.n	8006830 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006820:	f107 030a 	add.w	r3, r7, #10
 8006824:	2202      	movs	r2, #2
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fd33 	bl	8008294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800682e:	e032      	b.n	8006896 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 fcbd 	bl	80081b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006838:	2303      	movs	r3, #3
 800683a:	75fb      	strb	r3, [r7, #23]
          break;
 800683c:	e02b      	b.n	8006896 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b03      	cmp	r3, #3
 8006848:	d107      	bne.n	800685a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800684a:	f107 030d 	add.w	r3, r7, #13
 800684e:	2201      	movs	r2, #1
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fd1e 	bl	8008294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006858:	e01d      	b.n	8006896 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 fca8 	bl	80081b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006862:	2303      	movs	r3, #3
 8006864:	75fb      	strb	r3, [r7, #23]
          break;
 8006866:	e016      	b.n	8006896 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b03      	cmp	r3, #3
 8006872:	d00f      	beq.n	8006894 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fc9b 	bl	80081b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006880:	e008      	b.n	8006894 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fc94 	bl	80081b2 <USBD_CtlError>
          ret = USBD_FAIL;
 800688a:	2303      	movs	r3, #3
 800688c:	75fb      	strb	r3, [r7, #23]
          break;
 800688e:	e002      	b.n	8006896 <USBD_CDC_Setup+0x19e>
          break;
 8006890:	bf00      	nop
 8006892:	e008      	b.n	80068a6 <USBD_CDC_Setup+0x1ae>
          break;
 8006894:	bf00      	nop
      }
      break;
 8006896:	e006      	b.n	80068a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fc89 	bl	80081b2 <USBD_CtlError>
      ret = USBD_FAIL;
 80068a0:	2303      	movs	r3, #3
 80068a2:	75fb      	strb	r3, [r7, #23]
      break;
 80068a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80068c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	32b0      	adds	r2, #176	; 0xb0
 80068ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e065      	b.n	80069a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	32b0      	adds	r2, #176	; 0xb0
 80068e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	f003 020f 	and.w	r2, r3, #15
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	3318      	adds	r3, #24
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d02f      	beq.n	8006964 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	f003 020f 	and.w	r2, r3, #15
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	440b      	add	r3, r1
 8006916:	3318      	adds	r3, #24
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	f003 010f 	and.w	r1, r3, #15
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	460b      	mov	r3, r1
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	440b      	add	r3, r1
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4403      	add	r3, r0
 800692c:	3348      	adds	r3, #72	; 0x48
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	fbb2 f1f3 	udiv	r1, r2, r3
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800693a:	2b00      	cmp	r3, #0
 800693c:	d112      	bne.n	8006964 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	f003 020f 	and.w	r2, r3, #15
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	3318      	adds	r3, #24
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006956:	78f9      	ldrb	r1, [r7, #3]
 8006958:	2300      	movs	r3, #0
 800695a:	2200      	movs	r2, #0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f002 f990 	bl	8008c82 <USBD_LL_Transmit>
 8006962:	e01f      	b.n	80069a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	33b0      	adds	r3, #176	; 0xb0
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d010      	beq.n	80069a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	33b0      	adds	r3, #176	; 0xb0
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	32b0      	adds	r2, #176	; 0xb0
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	32b0      	adds	r2, #176	; 0xb0
 80069d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	e01a      	b.n	8006a16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f002 f98e 	bl	8008d06 <USBD_LL_GetRxDataSize>
 80069ea:	4602      	mov	r2, r0
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	33b0      	adds	r3, #176	; 0xb0
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a10:	4611      	mov	r1, r2
 8006a12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	32b0      	adds	r2, #176	; 0xb0
 8006a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e025      	b.n	8006a8c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	33b0      	adds	r3, #176	; 0xb0
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01a      	beq.n	8006a8a <USBD_CDC_EP0_RxReady+0x6c>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a5a:	2bff      	cmp	r3, #255	; 0xff
 8006a5c:	d015      	beq.n	8006a8a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	33b0      	adds	r3, #176	; 0xb0
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a7e:	b292      	uxth	r2, r2
 8006a80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	22ff      	movs	r2, #255	; 0xff
 8006a86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a9c:	2182      	movs	r1, #130	; 0x82
 8006a9e:	4818      	ldr	r0, [pc, #96]	; (8006b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006aa0:	f000 fd4f 	bl	8007542 <USBD_GetEpDesc>
 8006aa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	4815      	ldr	r0, [pc, #84]	; (8006b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006aaa:	f000 fd4a 	bl	8007542 <USBD_GetEpDesc>
 8006aae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ab0:	2181      	movs	r1, #129	; 0x81
 8006ab2:	4813      	ldr	r0, [pc, #76]	; (8006b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ab4:	f000 fd45 	bl	8007542 <USBD_GetEpDesc>
 8006ab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d006      	beq.n	8006ada <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad4:	711a      	strb	r2, [r3, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d006      	beq.n	8006aee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae8:	711a      	strb	r2, [r3, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2243      	movs	r2, #67	; 0x43
 8006af2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006af4:	4b02      	ldr	r3, [pc, #8]	; (8006b00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000050 	.word	0x20000050

08006b04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b0c:	2182      	movs	r1, #130	; 0x82
 8006b0e:	4818      	ldr	r0, [pc, #96]	; (8006b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b10:	f000 fd17 	bl	8007542 <USBD_GetEpDesc>
 8006b14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b16:	2101      	movs	r1, #1
 8006b18:	4815      	ldr	r0, [pc, #84]	; (8006b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b1a:	f000 fd12 	bl	8007542 <USBD_GetEpDesc>
 8006b1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b20:	2181      	movs	r1, #129	; 0x81
 8006b22:	4813      	ldr	r0, [pc, #76]	; (8006b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b24:	f000 fd0d 	bl	8007542 <USBD_GetEpDesc>
 8006b28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2210      	movs	r2, #16
 8006b34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d006      	beq.n	8006b4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	711a      	strb	r2, [r3, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f042 0202 	orr.w	r2, r2, #2
 8006b48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d006      	beq.n	8006b5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	711a      	strb	r2, [r3, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f042 0202 	orr.w	r2, r2, #2
 8006b5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2243      	movs	r2, #67	; 0x43
 8006b62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b64:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000050 	.word	0x20000050

08006b74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b7c:	2182      	movs	r1, #130	; 0x82
 8006b7e:	4818      	ldr	r0, [pc, #96]	; (8006be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b80:	f000 fcdf 	bl	8007542 <USBD_GetEpDesc>
 8006b84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b86:	2101      	movs	r1, #1
 8006b88:	4815      	ldr	r0, [pc, #84]	; (8006be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b8a:	f000 fcda 	bl	8007542 <USBD_GetEpDesc>
 8006b8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b90:	2181      	movs	r1, #129	; 0x81
 8006b92:	4813      	ldr	r0, [pc, #76]	; (8006be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b94:	f000 fcd5 	bl	8007542 <USBD_GetEpDesc>
 8006b98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2210      	movs	r2, #16
 8006ba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d006      	beq.n	8006bba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bb4:	711a      	strb	r2, [r3, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d006      	beq.n	8006bce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bc8:	711a      	strb	r2, [r3, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2243      	movs	r2, #67	; 0x43
 8006bd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bd4:	4b02      	ldr	r3, [pc, #8]	; (8006be0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000050 	.word	0x20000050

08006be4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	220a      	movs	r2, #10
 8006bf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006bf2:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	2000000c 	.word	0x2000000c

08006c04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e009      	b.n	8006c2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	33b0      	adds	r3, #176	; 0xb0
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	32b0      	adds	r2, #176	; 0xb0
 8006c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c52:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e008      	b.n	8006c70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	32b0      	adds	r2, #176	; 0xb0
 8006c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e004      	b.n	8006caa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	32b0      	adds	r2, #176	; 0xb0
 8006cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32b0      	adds	r2, #176	; 0xb0
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e025      	b.n	8006d36 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d11f      	bne.n	8006d34 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006cfc:	4b10      	ldr	r3, [pc, #64]	; (8006d40 <USBD_CDC_TransmitPacket+0x88>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 020f 	and.w	r2, r3, #15
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4403      	add	r3, r0
 8006d16:	3318      	adds	r3, #24
 8006d18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <USBD_CDC_TransmitPacket+0x88>)
 8006d1c:	7819      	ldrb	r1, [r3, #0]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 ffa9 	bl	8008c82 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000093 	.word	0x20000093

08006d44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32b0      	adds	r2, #176	; 0xb0
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	32b0      	adds	r2, #176	; 0xb0
 8006d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e018      	b.n	8006da4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7c1b      	ldrb	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d7a:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <USBD_CDC_ReceivePacket+0x68>)
 8006d7c:	7819      	ldrb	r1, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 ff9b 	bl	8008cc4 <USBD_LL_PrepareReceive>
 8006d8e:	e008      	b.n	8006da2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d90:	4b06      	ldr	r3, [pc, #24]	; (8006dac <USBD_CDC_ReceivePacket+0x68>)
 8006d92:	7819      	ldrb	r1, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d9a:	2340      	movs	r3, #64	; 0x40
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 ff91 	bl	8008cc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000094 	.word	0x20000094

08006db0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e01f      	b.n	8006e08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	79fa      	ldrb	r2, [r7, #7]
 8006dfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f001 fe0b 	bl	8008a18 <USBD_LL_Init>
 8006e02:	4603      	mov	r3, r0
 8006e04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e025      	b.n	8006e74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	32ae      	adds	r2, #174	; 0xae
 8006e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00f      	beq.n	8006e64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	32ae      	adds	r2, #174	; 0xae
 8006e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	f107 020e 	add.w	r2, r7, #14
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fe13 	bl	8008ab0 <USBD_LL_Start>
 8006e8a:	4603      	mov	r3, r0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d009      	beq.n	8006ed8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	78fa      	ldrb	r2, [r7, #3]
 8006ece:	4611      	mov	r1, r2
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4798      	blx	r3
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	78fa      	ldrb	r2, [r7, #3]
 8006efc:	4611      	mov	r1, r2
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 f908 	bl	800813e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d01a      	beq.n	8006f88 <USBD_LL_SetupStage+0x72>
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d822      	bhi.n	8006f9c <USBD_LL_SetupStage+0x86>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <USBD_LL_SetupStage+0x4a>
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d00a      	beq.n	8006f74 <USBD_LL_SetupStage+0x5e>
 8006f5e:	e01d      	b.n	8006f9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fb5f 	bl	800762c <USBD_StdDevReq>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73fb      	strb	r3, [r7, #15]
      break;
 8006f72:	e020      	b.n	8006fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fbc7 	bl	8007710 <USBD_StdItfReq>
 8006f82:	4603      	mov	r3, r0
 8006f84:	73fb      	strb	r3, [r7, #15]
      break;
 8006f86:	e016      	b.n	8006fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fc29 	bl	80077e8 <USBD_StdEPReq>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73fb      	strb	r3, [r7, #15]
      break;
 8006f9a:	e00c      	b.n	8006fb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 fde0 	bl	8008b70 <USBD_LL_StallEP>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb4:	bf00      	nop
  }

  return ret;
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d16e      	bne.n	80070b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006fde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	f040 8098 	bne.w	800711c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d913      	bls.n	8007020 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	1ad2      	subs	r2, r2, r3
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	4293      	cmp	r3, r2
 8007010:	bf28      	it	cs
 8007012:	4613      	movcs	r3, r2
 8007014:	461a      	mov	r2, r3
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f001 f984 	bl	8008326 <USBD_CtlContinueRx>
 800701e:	e07d      	b.n	800711c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007026:	f003 031f 	and.w	r3, r3, #31
 800702a:	2b02      	cmp	r3, #2
 800702c:	d014      	beq.n	8007058 <USBD_LL_DataOutStage+0x98>
 800702e:	2b02      	cmp	r3, #2
 8007030:	d81d      	bhi.n	800706e <USBD_LL_DataOutStage+0xae>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <USBD_LL_DataOutStage+0x7c>
 8007036:	2b01      	cmp	r3, #1
 8007038:	d003      	beq.n	8007042 <USBD_LL_DataOutStage+0x82>
 800703a:	e018      	b.n	800706e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	75bb      	strb	r3, [r7, #22]
            break;
 8007040:	e018      	b.n	8007074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007048:	b2db      	uxtb	r3, r3
 800704a:	4619      	mov	r1, r3
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fa5e 	bl	800750e <USBD_CoreFindIF>
 8007052:	4603      	mov	r3, r0
 8007054:	75bb      	strb	r3, [r7, #22]
            break;
 8007056:	e00d      	b.n	8007074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800705e:	b2db      	uxtb	r3, r3
 8007060:	4619      	mov	r1, r3
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fa60 	bl	8007528 <USBD_CoreFindEP>
 8007068:	4603      	mov	r3, r0
 800706a:	75bb      	strb	r3, [r7, #22]
            break;
 800706c:	e002      	b.n	8007074 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	75bb      	strb	r3, [r7, #22]
            break;
 8007072:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007074:	7dbb      	ldrb	r3, [r7, #22]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d119      	bne.n	80070ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d113      	bne.n	80070ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007086:	7dba      	ldrb	r2, [r7, #22]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	32ae      	adds	r2, #174	; 0xae
 800708c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007096:	7dba      	ldrb	r2, [r7, #22]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800709e:	7dba      	ldrb	r2, [r7, #22]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	32ae      	adds	r2, #174	; 0xae
 80070a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f001 f94a 	bl	8008348 <USBD_CtlSendStatus>
 80070b4:	e032      	b.n	800711c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	4619      	mov	r1, r3
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fa31 	bl	8007528 <USBD_CoreFindEP>
 80070c6:	4603      	mov	r3, r0
 80070c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070ca:	7dbb      	ldrb	r3, [r7, #22]
 80070cc:	2bff      	cmp	r3, #255	; 0xff
 80070ce:	d025      	beq.n	800711c <USBD_LL_DataOutStage+0x15c>
 80070d0:	7dbb      	ldrb	r3, [r7, #22]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d122      	bne.n	800711c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d117      	bne.n	8007112 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80070e2:	7dba      	ldrb	r2, [r7, #22]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	32ae      	adds	r2, #174	; 0xae
 80070e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00f      	beq.n	8007112 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80070f2:	7dba      	ldrb	r2, [r7, #22]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80070fa:	7dba      	ldrb	r2, [r7, #22]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	32ae      	adds	r2, #174	; 0xae
 8007100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	7afa      	ldrb	r2, [r7, #11]
 8007108:	4611      	mov	r1, r2
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	4798      	blx	r3
 800710e:	4603      	mov	r3, r0
 8007110:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	e000      	b.n	800711e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b086      	sub	sp, #24
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	460b      	mov	r3, r1
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007134:	7afb      	ldrb	r3, [r7, #11]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d16f      	bne.n	800721a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3314      	adds	r3, #20
 800713e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007146:	2b02      	cmp	r3, #2
 8007148:	d15a      	bne.n	8007200 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	689a      	ldr	r2, [r3, #8]
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	429a      	cmp	r2, r3
 8007154:	d914      	bls.n	8007180 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	1ad2      	subs	r2, r2, r3
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	461a      	mov	r2, r3
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f001 f8ac 	bl	80082ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007172:	2300      	movs	r3, #0
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f001 fda3 	bl	8008cc4 <USBD_LL_PrepareReceive>
 800717e:	e03f      	b.n	8007200 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	429a      	cmp	r2, r3
 800718a:	d11c      	bne.n	80071c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007194:	429a      	cmp	r2, r3
 8007196:	d316      	bcc.n	80071c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d20f      	bcs.n	80071c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f001 f88d 	bl	80082ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071b8:	2300      	movs	r3, #0
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f001 fd80 	bl	8008cc4 <USBD_LL_PrepareReceive>
 80071c4:	e01c      	b.n	8007200 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d10f      	bne.n	80071f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071f2:	2180      	movs	r1, #128	; 0x80
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 fcbb 	bl	8008b70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f001 f8b7 	bl	800836e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d03a      	beq.n	8007280 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f7ff fe42 	bl	8006e94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007218:	e032      	b.n	8007280 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007220:	b2db      	uxtb	r3, r3
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f97f 	bl	8007528 <USBD_CoreFindEP>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	2bff      	cmp	r3, #255	; 0xff
 8007232:	d025      	beq.n	8007280 <USBD_LL_DataInStage+0x15a>
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d122      	bne.n	8007280 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b03      	cmp	r3, #3
 8007244:	d11c      	bne.n	8007280 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007246:	7dfa      	ldrb	r2, [r7, #23]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	32ae      	adds	r2, #174	; 0xae
 800724c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d014      	beq.n	8007280 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007256:	7dfa      	ldrb	r2, [r7, #23]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800725e:	7dfa      	ldrb	r2, [r7, #23]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	32ae      	adds	r2, #174	; 0xae
 8007264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	7afa      	ldrb	r2, [r7, #11]
 800726c:	4611      	mov	r1, r2
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	4798      	blx	r3
 8007272:	4603      	mov	r3, r0
 8007274:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007276:	7dbb      	ldrb	r3, [r7, #22]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800727c:	7dbb      	ldrb	r3, [r7, #22]
 800727e:	e000      	b.n	8007282 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d014      	beq.n	80072f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00e      	beq.n	80072f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6852      	ldr	r2, [r2, #4]
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	4611      	mov	r1, r2
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80072ec:	2303      	movs	r3, #3
 80072ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	2200      	movs	r2, #0
 80072f4:	2100      	movs	r1, #0
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 fbf5 	bl	8008ae6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2240      	movs	r2, #64	; 0x40
 8007308:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800730c:	2340      	movs	r3, #64	; 0x40
 800730e:	2200      	movs	r2, #0
 8007310:	2180      	movs	r1, #128	; 0x80
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 fbe7 	bl	8008ae6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2240      	movs	r2, #64	; 0x40
 8007322:	621a      	str	r2, [r3, #32]

  return ret;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	78fa      	ldrb	r2, [r7, #3]
 800733e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800735c:	b2da      	uxtb	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2204      	movs	r2, #4
 8007368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b04      	cmp	r3, #4
 800738c:	d106      	bne.n	800739c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007394:	b2da      	uxtb	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d110      	bne.n	80073e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	32ae      	adds	r2, #174	; 0xae
 8007400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007408:	2303      	movs	r3, #3
 800740a:	e01c      	b.n	8007446 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b03      	cmp	r3, #3
 8007416:	d115      	bne.n	8007444 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	32ae      	adds	r2, #174	; 0xae
 8007422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	32ae      	adds	r2, #174	; 0xae
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	78fa      	ldrb	r2, [r7, #3]
 800743e:	4611      	mov	r1, r2
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b082      	sub	sp, #8
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	32ae      	adds	r2, #174	; 0xae
 8007464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	e01c      	b.n	80074aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b03      	cmp	r3, #3
 800747a:	d115      	bne.n	80074a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	32ae      	adds	r2, #174	; 0xae
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	32ae      	adds	r2, #174	; 0xae
 800749a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	4611      	mov	r1, r2
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00e      	beq.n	8007504 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6852      	ldr	r2, [r2, #4]
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	4611      	mov	r1, r2
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	460b      	mov	r3, r1
 8007518:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800751a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007534:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	885b      	ldrh	r3, [r3, #2]
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	429a      	cmp	r2, r3
 8007568:	d920      	bls.n	80075ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007572:	e013      	b.n	800759c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007574:	f107 030a 	add.w	r3, r7, #10
 8007578:	4619      	mov	r1, r3
 800757a:	6978      	ldr	r0, [r7, #20]
 800757c:	f000 f81b 	bl	80075b6 <USBD_GetNextDesc>
 8007580:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	785b      	ldrb	r3, [r3, #1]
 8007586:	2b05      	cmp	r3, #5
 8007588:	d108      	bne.n	800759c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	789b      	ldrb	r3, [r3, #2]
 8007592:	78fa      	ldrb	r2, [r7, #3]
 8007594:	429a      	cmp	r2, r3
 8007596:	d008      	beq.n	80075aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007598:	2300      	movs	r3, #0
 800759a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	885b      	ldrh	r3, [r3, #2]
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	897b      	ldrh	r3, [r7, #10]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d8e5      	bhi.n	8007574 <USBD_GetEpDesc+0x32>
 80075a8:	e000      	b.n	80075ac <USBD_GetEpDesc+0x6a>
          break;
 80075aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80075ac:	693b      	ldr	r3, [r7, #16]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	881a      	ldrh	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	4413      	add	r3, r2
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075e2:	68fb      	ldr	r3, [r7, #12]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	3301      	adds	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800760e:	8a3b      	ldrh	r3, [r7, #16]
 8007610:	021b      	lsls	r3, r3, #8
 8007612:	b21a      	sxth	r2, r3
 8007614:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007618:	4313      	orrs	r3, r2
 800761a:	b21b      	sxth	r3, r3
 800761c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800761e:	89fb      	ldrh	r3, [r7, #14]
}
 8007620:	4618      	mov	r0, r3
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007642:	2b40      	cmp	r3, #64	; 0x40
 8007644:	d005      	beq.n	8007652 <USBD_StdDevReq+0x26>
 8007646:	2b40      	cmp	r3, #64	; 0x40
 8007648:	d857      	bhi.n	80076fa <USBD_StdDevReq+0xce>
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00f      	beq.n	800766e <USBD_StdDevReq+0x42>
 800764e:	2b20      	cmp	r3, #32
 8007650:	d153      	bne.n	80076fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	32ae      	adds	r2, #174	; 0xae
 800765c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	4798      	blx	r3
 8007668:	4603      	mov	r3, r0
 800766a:	73fb      	strb	r3, [r7, #15]
      break;
 800766c:	e04a      	b.n	8007704 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	2b09      	cmp	r3, #9
 8007674:	d83b      	bhi.n	80076ee <USBD_StdDevReq+0xc2>
 8007676:	a201      	add	r2, pc, #4	; (adr r2, 800767c <USBD_StdDevReq+0x50>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	080076d1 	.word	0x080076d1
 8007680:	080076e5 	.word	0x080076e5
 8007684:	080076ef 	.word	0x080076ef
 8007688:	080076db 	.word	0x080076db
 800768c:	080076ef 	.word	0x080076ef
 8007690:	080076af 	.word	0x080076af
 8007694:	080076a5 	.word	0x080076a5
 8007698:	080076ef 	.word	0x080076ef
 800769c:	080076c7 	.word	0x080076c7
 80076a0:	080076b9 	.word	0x080076b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fa3c 	bl	8007b24 <USBD_GetDescriptor>
          break;
 80076ac:	e024      	b.n	80076f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fba1 	bl	8007df8 <USBD_SetAddress>
          break;
 80076b6:	e01f      	b.n	80076f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fbe0 	bl	8007e80 <USBD_SetConfig>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73fb      	strb	r3, [r7, #15]
          break;
 80076c4:	e018      	b.n	80076f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fc83 	bl	8007fd4 <USBD_GetConfig>
          break;
 80076ce:	e013      	b.n	80076f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fcb4 	bl	8008040 <USBD_GetStatus>
          break;
 80076d8:	e00e      	b.n	80076f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fce3 	bl	80080a8 <USBD_SetFeature>
          break;
 80076e2:	e009      	b.n	80076f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fd07 	bl	80080fa <USBD_ClrFeature>
          break;
 80076ec:	e004      	b.n	80076f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fd5e 	bl	80081b2 <USBD_CtlError>
          break;
 80076f6:	bf00      	nop
      }
      break;
 80076f8:	e004      	b.n	8007704 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fd58 	bl	80081b2 <USBD_CtlError>
      break;
 8007702:	bf00      	nop
  }

  return ret;
 8007704:	7bfb      	ldrb	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop

08007710 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007726:	2b40      	cmp	r3, #64	; 0x40
 8007728:	d005      	beq.n	8007736 <USBD_StdItfReq+0x26>
 800772a:	2b40      	cmp	r3, #64	; 0x40
 800772c:	d852      	bhi.n	80077d4 <USBD_StdItfReq+0xc4>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <USBD_StdItfReq+0x26>
 8007732:	2b20      	cmp	r3, #32
 8007734:	d14e      	bne.n	80077d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773c:	b2db      	uxtb	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	2b02      	cmp	r3, #2
 8007742:	d840      	bhi.n	80077c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	889b      	ldrh	r3, [r3, #4]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b01      	cmp	r3, #1
 800774c:	d836      	bhi.n	80077bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	889b      	ldrh	r3, [r3, #4]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7ff fed9 	bl	800750e <USBD_CoreFindIF>
 800775c:	4603      	mov	r3, r0
 800775e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	2bff      	cmp	r3, #255	; 0xff
 8007764:	d01d      	beq.n	80077a2 <USBD_StdItfReq+0x92>
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d11a      	bne.n	80077a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800776c:	7bba      	ldrb	r2, [r7, #14]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	32ae      	adds	r2, #174	; 0xae
 8007772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00f      	beq.n	800779c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800777c:	7bba      	ldrb	r2, [r7, #14]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007784:	7bba      	ldrb	r2, [r7, #14]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	32ae      	adds	r2, #174	; 0xae
 800778a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
 8007796:	4603      	mov	r3, r0
 8007798:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800779a:	e004      	b.n	80077a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077a0:	e001      	b.n	80077a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80077a2:	2303      	movs	r3, #3
 80077a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	88db      	ldrh	r3, [r3, #6]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d110      	bne.n	80077d0 <USBD_StdItfReq+0xc0>
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10d      	bne.n	80077d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fdc7 	bl	8008348 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077ba:	e009      	b.n	80077d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fcf7 	bl	80081b2 <USBD_CtlError>
          break;
 80077c4:	e004      	b.n	80077d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fcf2 	bl	80081b2 <USBD_CtlError>
          break;
 80077ce:	e000      	b.n	80077d2 <USBD_StdItfReq+0xc2>
          break;
 80077d0:	bf00      	nop
      }
      break;
 80077d2:	e004      	b.n	80077de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fceb 	bl	80081b2 <USBD_CtlError>
      break;
 80077dc:	bf00      	nop
  }

  return ret;
 80077de:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	889b      	ldrh	r3, [r3, #4]
 80077fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d007      	beq.n	8007818 <USBD_StdEPReq+0x30>
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	f200 817f 	bhi.w	8007b0c <USBD_StdEPReq+0x324>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d02a      	beq.n	8007868 <USBD_StdEPReq+0x80>
 8007812:	2b20      	cmp	r3, #32
 8007814:	f040 817a 	bne.w	8007b0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff fe83 	bl	8007528 <USBD_CoreFindEP>
 8007822:	4603      	mov	r3, r0
 8007824:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007826:	7b7b      	ldrb	r3, [r7, #13]
 8007828:	2bff      	cmp	r3, #255	; 0xff
 800782a:	f000 8174 	beq.w	8007b16 <USBD_StdEPReq+0x32e>
 800782e:	7b7b      	ldrb	r3, [r7, #13]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 8170 	bne.w	8007b16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007836:	7b7a      	ldrb	r2, [r7, #13]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800783e:	7b7a      	ldrb	r2, [r7, #13]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	32ae      	adds	r2, #174	; 0xae
 8007844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8163 	beq.w	8007b16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007850:	7b7a      	ldrb	r2, [r7, #13]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	32ae      	adds	r2, #174	; 0xae
 8007856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
 8007862:	4603      	mov	r3, r0
 8007864:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007866:	e156      	b.n	8007b16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b03      	cmp	r3, #3
 800786e:	d008      	beq.n	8007882 <USBD_StdEPReq+0x9a>
 8007870:	2b03      	cmp	r3, #3
 8007872:	f300 8145 	bgt.w	8007b00 <USBD_StdEPReq+0x318>
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 809b 	beq.w	80079b2 <USBD_StdEPReq+0x1ca>
 800787c:	2b01      	cmp	r3, #1
 800787e:	d03c      	beq.n	80078fa <USBD_StdEPReq+0x112>
 8007880:	e13e      	b.n	8007b00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d002      	beq.n	8007894 <USBD_StdEPReq+0xac>
 800788e:	2b03      	cmp	r3, #3
 8007890:	d016      	beq.n	80078c0 <USBD_StdEPReq+0xd8>
 8007892:	e02c      	b.n	80078ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <USBD_StdEPReq+0xce>
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	2b80      	cmp	r3, #128	; 0x80
 800789e:	d00a      	beq.n	80078b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 f963 	bl	8008b70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078aa:	2180      	movs	r1, #128	; 0x80
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 f95f 	bl	8008b70 <USBD_LL_StallEP>
 80078b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078b4:	e020      	b.n	80078f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fc7a 	bl	80081b2 <USBD_CtlError>
              break;
 80078be:	e01b      	b.n	80078f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	885b      	ldrh	r3, [r3, #2]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10e      	bne.n	80078e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <USBD_StdEPReq+0xfe>
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b80      	cmp	r3, #128	; 0x80
 80078d2:	d008      	beq.n	80078e6 <USBD_StdEPReq+0xfe>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	88db      	ldrh	r3, [r3, #6]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d104      	bne.n	80078e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 f945 	bl	8008b70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fd2e 	bl	8008348 <USBD_CtlSendStatus>

              break;
 80078ec:	e004      	b.n	80078f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fc5e 	bl	80081b2 <USBD_CtlError>
              break;
 80078f6:	bf00      	nop
          }
          break;
 80078f8:	e107      	b.n	8007b0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d002      	beq.n	800790c <USBD_StdEPReq+0x124>
 8007906:	2b03      	cmp	r3, #3
 8007908:	d016      	beq.n	8007938 <USBD_StdEPReq+0x150>
 800790a:	e04b      	b.n	80079a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00d      	beq.n	800792e <USBD_StdEPReq+0x146>
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b80      	cmp	r3, #128	; 0x80
 8007916:	d00a      	beq.n	800792e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 f927 	bl	8008b70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007922:	2180      	movs	r1, #128	; 0x80
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 f923 	bl	8008b70 <USBD_LL_StallEP>
 800792a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800792c:	e040      	b.n	80079b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fc3e 	bl	80081b2 <USBD_CtlError>
              break;
 8007936:	e03b      	b.n	80079b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	885b      	ldrh	r3, [r3, #2]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d136      	bne.n	80079ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007946:	2b00      	cmp	r3, #0
 8007948:	d004      	beq.n	8007954 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 f92d 	bl	8008bae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fcf7 	bl	8008348 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff fde2 	bl	8007528 <USBD_CoreFindEP>
 8007964:	4603      	mov	r3, r0
 8007966:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007968:	7b7b      	ldrb	r3, [r7, #13]
 800796a:	2bff      	cmp	r3, #255	; 0xff
 800796c:	d01f      	beq.n	80079ae <USBD_StdEPReq+0x1c6>
 800796e:	7b7b      	ldrb	r3, [r7, #13]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d11c      	bne.n	80079ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007974:	7b7a      	ldrb	r2, [r7, #13]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800797c:	7b7a      	ldrb	r2, [r7, #13]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	32ae      	adds	r2, #174	; 0xae
 8007982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d010      	beq.n	80079ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800798c:	7b7a      	ldrb	r2, [r7, #13]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	32ae      	adds	r2, #174	; 0xae
 8007992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
 800799e:	4603      	mov	r3, r0
 80079a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80079a2:	e004      	b.n	80079ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fc03 	bl	80081b2 <USBD_CtlError>
              break;
 80079ac:	e000      	b.n	80079b0 <USBD_StdEPReq+0x1c8>
              break;
 80079ae:	bf00      	nop
          }
          break;
 80079b0:	e0ab      	b.n	8007b0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d002      	beq.n	80079c4 <USBD_StdEPReq+0x1dc>
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d032      	beq.n	8007a28 <USBD_StdEPReq+0x240>
 80079c2:	e097      	b.n	8007af4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d007      	beq.n	80079da <USBD_StdEPReq+0x1f2>
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	2b80      	cmp	r3, #128	; 0x80
 80079ce:	d004      	beq.n	80079da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fbed 	bl	80081b2 <USBD_CtlError>
                break;
 80079d8:	e091      	b.n	8007afe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	da0b      	bge.n	80079fa <USBD_StdEPReq+0x212>
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	3310      	adds	r3, #16
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	4413      	add	r3, r2
 80079f6:	3304      	adds	r3, #4
 80079f8:	e00b      	b.n	8007a12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	4413      	add	r3, r2
 8007a10:	3304      	adds	r3, #4
 8007a12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fc37 	bl	8008294 <USBD_CtlSendData>
              break;
 8007a26:	e06a      	b.n	8007afe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	da11      	bge.n	8007a54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	f003 020f 	and.w	r2, r3, #15
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	3324      	adds	r3, #36	; 0x24
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d117      	bne.n	8007a7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fbb0 	bl	80081b2 <USBD_CtlError>
                  break;
 8007a52:	e054      	b.n	8007afe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	f003 020f 	and.w	r2, r3, #15
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d104      	bne.n	8007a7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fb9d 	bl	80081b2 <USBD_CtlError>
                  break;
 8007a78:	e041      	b.n	8007afe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	da0b      	bge.n	8007a9a <USBD_StdEPReq+0x2b2>
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	3310      	adds	r3, #16
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	4413      	add	r3, r2
 8007a96:	3304      	adds	r3, #4
 8007a98:	e00b      	b.n	8007ab2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	4413      	add	r3, r2
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <USBD_StdEPReq+0x2d8>
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b80      	cmp	r3, #128	; 0x80
 8007abe:	d103      	bne.n	8007ac8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e00e      	b.n	8007ae6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 f88d 	bl	8008bec <USBD_LL_IsStallEP>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2201      	movs	r2, #1
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	e002      	b.n	8007ae6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2202      	movs	r2, #2
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fbd1 	bl	8008294 <USBD_CtlSendData>
              break;
 8007af2:	e004      	b.n	8007afe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fb5b 	bl	80081b2 <USBD_CtlError>
              break;
 8007afc:	bf00      	nop
          }
          break;
 8007afe:	e004      	b.n	8007b0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fb55 	bl	80081b2 <USBD_CtlError>
          break;
 8007b08:	bf00      	nop
      }
      break;
 8007b0a:	e005      	b.n	8007b18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fb4f 	bl	80081b2 <USBD_CtlError>
      break;
 8007b14:	e000      	b.n	8007b18 <USBD_StdEPReq+0x330>
      break;
 8007b16:	bf00      	nop
  }

  return ret;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	885b      	ldrh	r3, [r3, #2]
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	2b06      	cmp	r3, #6
 8007b46:	f200 8128 	bhi.w	8007d9a <USBD_GetDescriptor+0x276>
 8007b4a:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <USBD_GetDescriptor+0x2c>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b6d 	.word	0x08007b6d
 8007b54:	08007b85 	.word	0x08007b85
 8007b58:	08007bc5 	.word	0x08007bc5
 8007b5c:	08007d9b 	.word	0x08007d9b
 8007b60:	08007d9b 	.word	0x08007d9b
 8007b64:	08007d3b 	.word	0x08007d3b
 8007b68:	08007d67 	.word	0x08007d67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	7c12      	ldrb	r2, [r2, #16]
 8007b78:	f107 0108 	add.w	r1, r7, #8
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
      break;
 8007b82:	e112      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7c1b      	ldrb	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10d      	bne.n	8007ba8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	f107 0208 	add.w	r2, r7, #8
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
 8007b9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ba6:	e100      	b.n	8007daa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	f107 0208 	add.w	r2, r7, #8
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	701a      	strb	r2, [r3, #0]
      break;
 8007bc2:	e0f2      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	885b      	ldrh	r3, [r3, #2]
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b05      	cmp	r3, #5
 8007bcc:	f200 80ac 	bhi.w	8007d28 <USBD_GetDescriptor+0x204>
 8007bd0:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <USBD_GetDescriptor+0xb4>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007bf1 	.word	0x08007bf1
 8007bdc:	08007c25 	.word	0x08007c25
 8007be0:	08007c59 	.word	0x08007c59
 8007be4:	08007c8d 	.word	0x08007c8d
 8007be8:	08007cc1 	.word	0x08007cc1
 8007bec:	08007cf5 	.word	0x08007cf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c12:	e091      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 facb 	bl	80081b2 <USBD_CtlError>
            err++;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	72fb      	strb	r3, [r7, #11]
          break;
 8007c22:	e089      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7c12      	ldrb	r2, [r2, #16]
 8007c3c:	f107 0108 	add.w	r1, r7, #8
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
 8007c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c46:	e077      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fab1 	bl	80081b2 <USBD_CtlError>
            err++;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3301      	adds	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]
          break;
 8007c56:	e06f      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	7c12      	ldrb	r2, [r2, #16]
 8007c70:	f107 0108 	add.w	r1, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7a:	e05d      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa97 	bl	80081b2 <USBD_CtlError>
            err++;
 8007c84:	7afb      	ldrb	r3, [r7, #11]
 8007c86:	3301      	adds	r3, #1
 8007c88:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8a:	e055      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	7c12      	ldrb	r2, [r2, #16]
 8007ca4:	f107 0108 	add.w	r1, r7, #8
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4798      	blx	r3
 8007cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cae:	e043      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa7d 	bl	80081b2 <USBD_CtlError>
            err++;
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cbe:	e03b      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7c12      	ldrb	r2, [r2, #16]
 8007cd8:	f107 0108 	add.w	r1, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce2:	e029      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa63 	bl	80081b2 <USBD_CtlError>
            err++;
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf2:	e021      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d16:	e00f      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa49 	bl	80081b2 <USBD_CtlError>
            err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
          break;
 8007d26:	e007      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa41 	bl	80081b2 <USBD_CtlError>
          err++;
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	3301      	adds	r3, #1
 8007d34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d36:	bf00      	nop
      }
      break;
 8007d38:	e037      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	7c1b      	ldrb	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	f107 0208 	add.w	r2, r7, #8
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4798      	blx	r3
 8007d52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d54:	e029      	b.n	8007daa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fa2a 	bl	80081b2 <USBD_CtlError>
        err++;
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	3301      	adds	r3, #1
 8007d62:	72fb      	strb	r3, [r7, #11]
      break;
 8007d64:	e021      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	7c1b      	ldrb	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10d      	bne.n	8007d8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	f107 0208 	add.w	r2, r7, #8
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4798      	blx	r3
 8007d7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3301      	adds	r3, #1
 8007d84:	2207      	movs	r2, #7
 8007d86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d88:	e00f      	b.n	8007daa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fa10 	bl	80081b2 <USBD_CtlError>
        err++;
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	3301      	adds	r3, #1
 8007d96:	72fb      	strb	r3, [r7, #11]
      break;
 8007d98:	e007      	b.n	8007daa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fa08 	bl	80081b2 <USBD_CtlError>
      err++;
 8007da2:	7afb      	ldrb	r3, [r7, #11]
 8007da4:	3301      	adds	r3, #1
 8007da6:	72fb      	strb	r3, [r7, #11]
      break;
 8007da8:	bf00      	nop
  }

  if (err != 0U)
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d11e      	bne.n	8007dee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	88db      	ldrh	r3, [r3, #6]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d016      	beq.n	8007de6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007db8:	893b      	ldrh	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00e      	beq.n	8007ddc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88da      	ldrh	r2, [r3, #6]
 8007dc2:	893b      	ldrh	r3, [r7, #8]
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	bf28      	it	cs
 8007dc8:	4613      	movcs	r3, r2
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dce:	893b      	ldrh	r3, [r7, #8]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fa5d 	bl	8008294 <USBD_CtlSendData>
 8007dda:	e009      	b.n	8007df0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f9e7 	bl	80081b2 <USBD_CtlError>
 8007de4:	e004      	b.n	8007df0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 faae 	bl	8008348 <USBD_CtlSendStatus>
 8007dec:	e000      	b.n	8007df0 <USBD_GetDescriptor+0x2cc>
    return;
 8007dee:	bf00      	nop
  }
}
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop

08007df8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	889b      	ldrh	r3, [r3, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d131      	bne.n	8007e6e <USBD_SetAddress+0x76>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	88db      	ldrh	r3, [r3, #6]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d12d      	bne.n	8007e6e <USBD_SetAddress+0x76>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	885b      	ldrh	r3, [r3, #2]
 8007e16:	2b7f      	cmp	r3, #127	; 0x7f
 8007e18:	d829      	bhi.n	8007e6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	885b      	ldrh	r3, [r3, #2]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d104      	bne.n	8007e3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f9bc 	bl	80081b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3a:	e01d      	b.n	8007e78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7bfa      	ldrb	r2, [r7, #15]
 8007e40:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fefb 	bl	8008c44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa7a 	bl	8008348 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e62:	e009      	b.n	8007e78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6c:	e004      	b.n	8007e78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f99e 	bl	80081b2 <USBD_CtlError>
  }
}
 8007e76:	bf00      	nop
 8007e78:	bf00      	nop
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	885b      	ldrh	r3, [r3, #2]
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	4b4e      	ldr	r3, [pc, #312]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007e96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e98:	4b4d      	ldr	r3, [pc, #308]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d905      	bls.n	8007eac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f985 	bl	80081b2 <USBD_CtlError>
    return USBD_FAIL;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e08c      	b.n	8007fc6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d002      	beq.n	8007ebe <USBD_SetConfig+0x3e>
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d029      	beq.n	8007f10 <USBD_SetConfig+0x90>
 8007ebc:	e075      	b.n	8007faa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ebe:	4b44      	ldr	r3, [pc, #272]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d020      	beq.n	8007f08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007ec6:	4b42      	ldr	r3, [pc, #264]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ed0:	4b3f      	ldr	r3, [pc, #252]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fe ffe7 	bl	8006eaa <USBD_SetClassConfig>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d008      	beq.n	8007ef8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f962 	bl	80081b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ef6:	e065      	b.n	8007fc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fa25 	bl	8008348 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2203      	movs	r2, #3
 8007f02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f06:	e05d      	b.n	8007fc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fa1d 	bl	8008348 <USBD_CtlSendStatus>
      break;
 8007f0e:	e059      	b.n	8007fc4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f10:	4b2f      	ldr	r3, [pc, #188]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d112      	bne.n	8007f3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f20:	4b2b      	ldr	r3, [pc, #172]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f2a:	4b29      	ldr	r3, [pc, #164]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7fe ffd6 	bl	8006ee2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa06 	bl	8008348 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f3c:	e042      	b.n	8007fc4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f3e:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d02a      	beq.n	8007fa2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7fe ffc4 	bl	8006ee2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f5a:	4b1d      	ldr	r3, [pc, #116]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f64:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fe ff9d 	bl	8006eaa <USBD_SetClassConfig>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00f      	beq.n	8007f9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f918 	bl	80081b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fe ffa9 	bl	8006ee2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f98:	e014      	b.n	8007fc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f9d4 	bl	8008348 <USBD_CtlSendStatus>
      break;
 8007fa0:	e010      	b.n	8007fc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9d0 	bl	8008348 <USBD_CtlSendStatus>
      break;
 8007fa8:	e00c      	b.n	8007fc4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f900 	bl	80081b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fb2:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <USBD_SetConfig+0x150>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7fe ff92 	bl	8006ee2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc2:	bf00      	nop
  }

  return ret;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	200002cc 	.word	0x200002cc

08007fd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	88db      	ldrh	r3, [r3, #6]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d004      	beq.n	8007ff0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f8e2 	bl	80081b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fee:	e023      	b.n	8008038 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	dc02      	bgt.n	8008002 <USBD_GetConfig+0x2e>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dc03      	bgt.n	8008008 <USBD_GetConfig+0x34>
 8008000:	e015      	b.n	800802e <USBD_GetConfig+0x5a>
 8008002:	2b03      	cmp	r3, #3
 8008004:	d00b      	beq.n	800801e <USBD_GetConfig+0x4a>
 8008006:	e012      	b.n	800802e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3308      	adds	r3, #8
 8008012:	2201      	movs	r2, #1
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f93c 	bl	8008294 <USBD_CtlSendData>
        break;
 800801c:	e00c      	b.n	8008038 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3304      	adds	r3, #4
 8008022:	2201      	movs	r2, #1
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f934 	bl	8008294 <USBD_CtlSendData>
        break;
 800802c:	e004      	b.n	8008038 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f8be 	bl	80081b2 <USBD_CtlError>
        break;
 8008036:	bf00      	nop
}
 8008038:	bf00      	nop
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008050:	b2db      	uxtb	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	2b02      	cmp	r3, #2
 8008056:	d81e      	bhi.n	8008096 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	88db      	ldrh	r3, [r3, #6]
 800805c:	2b02      	cmp	r3, #2
 800805e:	d004      	beq.n	800806a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f8a5 	bl	80081b2 <USBD_CtlError>
        break;
 8008068:	e01a      	b.n	80080a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f043 0202 	orr.w	r2, r3, #2
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	330c      	adds	r3, #12
 800808a:	2202      	movs	r2, #2
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f900 	bl	8008294 <USBD_CtlSendData>
      break;
 8008094:	e004      	b.n	80080a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f88a 	bl	80081b2 <USBD_CtlError>
      break;
 800809e:	bf00      	nop
  }
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	885b      	ldrh	r3, [r3, #2]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d107      	bne.n	80080ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f940 	bl	8008348 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80080c8:	e013      	b.n	80080f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	885b      	ldrh	r3, [r3, #2]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d10b      	bne.n	80080ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	889b      	ldrh	r3, [r3, #4]
 80080d6:	0a1b      	lsrs	r3, r3, #8
 80080d8:	b29b      	uxth	r3, r3
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f930 	bl	8008348 <USBD_CtlSendStatus>
}
 80080e8:	e003      	b.n	80080f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f860 	bl	80081b2 <USBD_CtlError>
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810a:	b2db      	uxtb	r3, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	2b02      	cmp	r3, #2
 8008110:	d80b      	bhi.n	800812a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	885b      	ldrh	r3, [r3, #2]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d10c      	bne.n	8008134 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f910 	bl	8008348 <USBD_CtlSendStatus>
      }
      break;
 8008128:	e004      	b.n	8008134 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f840 	bl	80081b2 <USBD_CtlError>
      break;
 8008132:	e000      	b.n	8008136 <USBD_ClrFeature+0x3c>
      break;
 8008134:	bf00      	nop
  }
}
 8008136:	bf00      	nop
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	781a      	ldrb	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fa41 	bl	80075f0 <SWAPBYTE>
 800816e:	4603      	mov	r3, r0
 8008170:	461a      	mov	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3301      	adds	r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7ff fa34 	bl	80075f0 <SWAPBYTE>
 8008188:	4603      	mov	r3, r0
 800818a:	461a      	mov	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3301      	adds	r3, #1
 8008194:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3301      	adds	r3, #1
 800819a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f7ff fa27 	bl	80075f0 <SWAPBYTE>
 80081a2:	4603      	mov	r3, r0
 80081a4:	461a      	mov	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	80da      	strh	r2, [r3, #6]
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081bc:	2180      	movs	r1, #128	; 0x80
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fcd6 	bl	8008b70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081c4:	2100      	movs	r1, #0
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fcd2 	bl	8008b70 <USBD_LL_StallEP>
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d036      	beq.n	8008258 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081ee:	6938      	ldr	r0, [r7, #16]
 80081f0:	f000 f836 	bl	8008260 <USBD_GetLen>
 80081f4:	4603      	mov	r3, r0
 80081f6:	3301      	adds	r3, #1
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	4413      	add	r3, r2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	7812      	ldrb	r2, [r2, #0]
 800820c:	701a      	strb	r2, [r3, #0]
  idx++;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	3301      	adds	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	4413      	add	r3, r2
 800821a:	2203      	movs	r2, #3
 800821c:	701a      	strb	r2, [r3, #0]
  idx++;
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	3301      	adds	r3, #1
 8008222:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008224:	e013      	b.n	800824e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	4413      	add	r3, r2
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	7812      	ldrb	r2, [r2, #0]
 8008230:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	3301      	adds	r3, #1
 8008236:	613b      	str	r3, [r7, #16]
    idx++;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	3301      	adds	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800823e:	7dfb      	ldrb	r3, [r7, #23]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	4413      	add	r3, r2
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
    idx++;
 8008248:	7dfb      	ldrb	r3, [r7, #23]
 800824a:	3301      	adds	r3, #1
 800824c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e7      	bne.n	8008226 <USBD_GetString+0x52>
 8008256:	e000      	b.n	800825a <USBD_GetString+0x86>
    return;
 8008258:	bf00      	nop
  }
}
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008270:	e005      	b.n	800827e <USBD_GetLen+0x1e>
  {
    len++;
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	3301      	adds	r3, #1
 8008276:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	3301      	adds	r3, #1
 800827c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1f5      	bne.n	8008272 <USBD_GetLen+0x12>
  }

  return len;
 8008286:	7bfb      	ldrb	r3, [r7, #15]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	2100      	movs	r1, #0
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fce1 	bl	8008c82 <USBD_LL_Transmit>

  return USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	2100      	movs	r1, #0
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 fcd0 	bl	8008c82 <USBD_LL_Transmit>

  return USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2203      	movs	r2, #3
 80082fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	2100      	movs	r1, #0
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 fcd4 	bl	8008cc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	2100      	movs	r1, #0
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fcc3 	bl	8008cc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2204      	movs	r2, #4
 8008354:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008358:	2300      	movs	r3, #0
 800835a:	2200      	movs	r2, #0
 800835c:	2100      	movs	r1, #0
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fc8f 	bl	8008c82 <USBD_LL_Transmit>

  return USBD_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b082      	sub	sp, #8
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2205      	movs	r2, #5
 800837a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800837e:	2300      	movs	r3, #0
 8008380:	2200      	movs	r2, #0
 8008382:	2100      	movs	r1, #0
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fc9d 	bl	8008cc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008398:	2200      	movs	r2, #0
 800839a:	4912      	ldr	r1, [pc, #72]	; (80083e4 <MX_USB_DEVICE_Init+0x50>)
 800839c:	4812      	ldr	r0, [pc, #72]	; (80083e8 <MX_USB_DEVICE_Init+0x54>)
 800839e:	f7fe fd07 	bl	8006db0 <USBD_Init>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083a8:	f7f8 fb64 	bl	8000a74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083ac:	490f      	ldr	r1, [pc, #60]	; (80083ec <MX_USB_DEVICE_Init+0x58>)
 80083ae:	480e      	ldr	r0, [pc, #56]	; (80083e8 <MX_USB_DEVICE_Init+0x54>)
 80083b0:	f7fe fd2e 	bl	8006e10 <USBD_RegisterClass>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083ba:	f7f8 fb5b 	bl	8000a74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083be:	490c      	ldr	r1, [pc, #48]	; (80083f0 <MX_USB_DEVICE_Init+0x5c>)
 80083c0:	4809      	ldr	r0, [pc, #36]	; (80083e8 <MX_USB_DEVICE_Init+0x54>)
 80083c2:	f7fe fc1f 	bl	8006c04 <USBD_CDC_RegisterInterface>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083cc:	f7f8 fb52 	bl	8000a74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083d0:	4805      	ldr	r0, [pc, #20]	; (80083e8 <MX_USB_DEVICE_Init+0x54>)
 80083d2:	f7fe fd53 	bl	8006e7c <USBD_Start>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083dc:	f7f8 fb4a 	bl	8000a74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083e0:	bf00      	nop
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	200000ac 	.word	0x200000ac
 80083e8:	200002d0 	.word	0x200002d0
 80083ec:	20000018 	.word	0x20000018
 80083f0:	20000098 	.word	0x20000098

080083f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083f8:	2200      	movs	r2, #0
 80083fa:	4905      	ldr	r1, [pc, #20]	; (8008410 <CDC_Init_FS+0x1c>)
 80083fc:	4805      	ldr	r0, [pc, #20]	; (8008414 <CDC_Init_FS+0x20>)
 80083fe:	f7fe fc1b 	bl	8006c38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008402:	4905      	ldr	r1, [pc, #20]	; (8008418 <CDC_Init_FS+0x24>)
 8008404:	4803      	ldr	r0, [pc, #12]	; (8008414 <CDC_Init_FS+0x20>)
 8008406:	f7fe fc39 	bl	8006c7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800840a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800840c:	4618      	mov	r0, r3
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20000dac 	.word	0x20000dac
 8008414:	200002d0 	.word	0x200002d0
 8008418:	200005ac 	.word	0x200005ac

0800841c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008420:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008422:	4618      	mov	r0, r3
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	6039      	str	r1, [r7, #0]
 8008436:	71fb      	strb	r3, [r7, #7]
 8008438:	4613      	mov	r3, r2
 800843a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2b23      	cmp	r3, #35	; 0x23
 8008440:	d84a      	bhi.n	80084d8 <CDC_Control_FS+0xac>
 8008442:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <CDC_Control_FS+0x1c>)
 8008444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008448:	080084d9 	.word	0x080084d9
 800844c:	080084d9 	.word	0x080084d9
 8008450:	080084d9 	.word	0x080084d9
 8008454:	080084d9 	.word	0x080084d9
 8008458:	080084d9 	.word	0x080084d9
 800845c:	080084d9 	.word	0x080084d9
 8008460:	080084d9 	.word	0x080084d9
 8008464:	080084d9 	.word	0x080084d9
 8008468:	080084d9 	.word	0x080084d9
 800846c:	080084d9 	.word	0x080084d9
 8008470:	080084d9 	.word	0x080084d9
 8008474:	080084d9 	.word	0x080084d9
 8008478:	080084d9 	.word	0x080084d9
 800847c:	080084d9 	.word	0x080084d9
 8008480:	080084d9 	.word	0x080084d9
 8008484:	080084d9 	.word	0x080084d9
 8008488:	080084d9 	.word	0x080084d9
 800848c:	080084d9 	.word	0x080084d9
 8008490:	080084d9 	.word	0x080084d9
 8008494:	080084d9 	.word	0x080084d9
 8008498:	080084d9 	.word	0x080084d9
 800849c:	080084d9 	.word	0x080084d9
 80084a0:	080084d9 	.word	0x080084d9
 80084a4:	080084d9 	.word	0x080084d9
 80084a8:	080084d9 	.word	0x080084d9
 80084ac:	080084d9 	.word	0x080084d9
 80084b0:	080084d9 	.word	0x080084d9
 80084b4:	080084d9 	.word	0x080084d9
 80084b8:	080084d9 	.word	0x080084d9
 80084bc:	080084d9 	.word	0x080084d9
 80084c0:	080084d9 	.word	0x080084d9
 80084c4:	080084d9 	.word	0x080084d9
 80084c8:	080084d9 	.word	0x080084d9
 80084cc:	080084d9 	.word	0x080084d9
 80084d0:	080084d9 	.word	0x080084d9
 80084d4:	080084d9 	.word	0x080084d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084d8:	bf00      	nop
  }

  return (USBD_OK);
 80084da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	4805      	ldr	r0, [pc, #20]	; (800850c <CDC_Receive_FS+0x24>)
 80084f6:	f7fe fbc1 	bl	8006c7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084fa:	4804      	ldr	r0, [pc, #16]	; (800850c <CDC_Receive_FS+0x24>)
 80084fc:	f7fe fc22 	bl	8006d44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008500:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200002d0 	.word	0x200002d0

08008510 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008520:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <CDC_Transmit_FS+0x48>)
 8008522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008526:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008532:	2301      	movs	r3, #1
 8008534:	e00b      	b.n	800854e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008536:	887b      	ldrh	r3, [r7, #2]
 8008538:	461a      	mov	r2, r3
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	4806      	ldr	r0, [pc, #24]	; (8008558 <CDC_Transmit_FS+0x48>)
 800853e:	f7fe fb7b 	bl	8006c38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008542:	4805      	ldr	r0, [pc, #20]	; (8008558 <CDC_Transmit_FS+0x48>)
 8008544:	f7fe fbb8 	bl	8006cb8 <USBD_CDC_TransmitPacket>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	200002d0 	.word	0x200002d0

0800855c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800856e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008572:	4618      	mov	r0, r3
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
	...

08008580 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2212      	movs	r2, #18
 8008590:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008592:	4b03      	ldr	r3, [pc, #12]	; (80085a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	200000c8 	.word	0x200000c8

080085a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	2204      	movs	r2, #4
 80085b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085b6:	4b03      	ldr	r3, [pc, #12]	; (80085c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	200000dc 	.word	0x200000dc

080085c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	4907      	ldr	r1, [pc, #28]	; (80085fc <USBD_FS_ProductStrDescriptor+0x34>)
 80085de:	4808      	ldr	r0, [pc, #32]	; (8008600 <USBD_FS_ProductStrDescriptor+0x38>)
 80085e0:	f7ff fdf8 	bl	80081d4 <USBD_GetString>
 80085e4:	e004      	b.n	80085f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4904      	ldr	r1, [pc, #16]	; (80085fc <USBD_FS_ProductStrDescriptor+0x34>)
 80085ea:	4805      	ldr	r0, [pc, #20]	; (8008600 <USBD_FS_ProductStrDescriptor+0x38>)
 80085ec:	f7ff fdf2 	bl	80081d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f0:	4b02      	ldr	r3, [pc, #8]	; (80085fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	200015ac 	.word	0x200015ac
 8008600:	0800973c 	.word	0x0800973c

08008604 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	6039      	str	r1, [r7, #0]
 800860e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	4904      	ldr	r1, [pc, #16]	; (8008624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008614:	4804      	ldr	r0, [pc, #16]	; (8008628 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008616:	f7ff fddd 	bl	80081d4 <USBD_GetString>
  return USBD_StrDesc;
 800861a:	4b02      	ldr	r3, [pc, #8]	; (8008624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	200015ac 	.word	0x200015ac
 8008628:	0800974c 	.word	0x0800974c

0800862c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	221a      	movs	r2, #26
 800863c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800863e:	f000 f843 	bl	80086c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008642:	4b02      	ldr	r3, [pc, #8]	; (800864c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	200000e0 	.word	0x200000e0

08008650 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d105      	bne.n	800866e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	4907      	ldr	r1, [pc, #28]	; (8008684 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008666:	4808      	ldr	r0, [pc, #32]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008668:	f7ff fdb4 	bl	80081d4 <USBD_GetString>
 800866c:	e004      	b.n	8008678 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	4904      	ldr	r1, [pc, #16]	; (8008684 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008672:	4805      	ldr	r0, [pc, #20]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008674:	f7ff fdae 	bl	80081d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008678:	4b02      	ldr	r3, [pc, #8]	; (8008684 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	200015ac 	.word	0x200015ac
 8008688:	08009754 	.word	0x08009754

0800868c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d105      	bne.n	80086aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4907      	ldr	r1, [pc, #28]	; (80086c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086a2:	4808      	ldr	r0, [pc, #32]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086a4:	f7ff fd96 	bl	80081d4 <USBD_GetString>
 80086a8:	e004      	b.n	80086b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4904      	ldr	r1, [pc, #16]	; (80086c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ae:	4805      	ldr	r0, [pc, #20]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086b0:	f7ff fd90 	bl	80081d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	200015ac 	.word	0x200015ac
 80086c4:	08009760 	.word	0x08009760

080086c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <Get_SerialNum+0x44>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086d4:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <Get_SerialNum+0x48>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086da:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <Get_SerialNum+0x4c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4413      	add	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d009      	beq.n	8008702 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ee:	2208      	movs	r2, #8
 80086f0:	4909      	ldr	r1, [pc, #36]	; (8008718 <Get_SerialNum+0x50>)
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f814 	bl	8008720 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086f8:	2204      	movs	r2, #4
 80086fa:	4908      	ldr	r1, [pc, #32]	; (800871c <Get_SerialNum+0x54>)
 80086fc:	68b8      	ldr	r0, [r7, #8]
 80086fe:	f000 f80f 	bl	8008720 <IntToUnicode>
  }
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	1fff7a10 	.word	0x1fff7a10
 8008710:	1fff7a14 	.word	0x1fff7a14
 8008714:	1fff7a18 	.word	0x1fff7a18
 8008718:	200000e2 	.word	0x200000e2
 800871c:	200000f2 	.word	0x200000f2

08008720 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
 8008736:	e027      	b.n	8008788 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	0f1b      	lsrs	r3, r3, #28
 800873c:	2b09      	cmp	r3, #9
 800873e:	d80b      	bhi.n	8008758 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	0f1b      	lsrs	r3, r3, #28
 8008744:	b2da      	uxtb	r2, r3
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	4619      	mov	r1, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	440b      	add	r3, r1
 8008750:	3230      	adds	r2, #48	; 0x30
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e00a      	b.n	800876e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	0f1b      	lsrs	r3, r3, #28
 800875c:	b2da      	uxtb	r2, r3
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	4619      	mov	r1, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	440b      	add	r3, r1
 8008768:	3237      	adds	r2, #55	; 0x37
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	3301      	adds	r3, #1
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4413      	add	r3, r2
 800877e:	2200      	movs	r2, #0
 8008780:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	3301      	adds	r3, #1
 8008786:	75fb      	strb	r3, [r7, #23]
 8008788:	7dfa      	ldrb	r2, [r7, #23]
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	429a      	cmp	r2, r3
 800878e:	d3d3      	bcc.n	8008738 <IntToUnicode+0x18>
  }
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
	...

080087a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08a      	sub	sp, #40	; 0x28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087a8:	f107 0314 	add.w	r3, r7, #20
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	605a      	str	r2, [r3, #4]
 80087b2:	609a      	str	r2, [r3, #8]
 80087b4:	60da      	str	r2, [r3, #12]
 80087b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087c0:	d13a      	bne.n	8008838 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087c2:	2300      	movs	r3, #0
 80087c4:	613b      	str	r3, [r7, #16]
 80087c6:	4b1e      	ldr	r3, [pc, #120]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	4a1d      	ldr	r2, [pc, #116]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 80087cc:	f043 0301 	orr.w	r3, r3, #1
 80087d0:	6313      	str	r3, [r2, #48]	; 0x30
 80087d2:	4b1b      	ldr	r3, [pc, #108]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 80087d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	613b      	str	r3, [r7, #16]
 80087dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80087de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80087e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e4:	2302      	movs	r3, #2
 80087e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ec:	2303      	movs	r3, #3
 80087ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087f0:	230a      	movs	r3, #10
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	4619      	mov	r1, r3
 80087fa:	4812      	ldr	r0, [pc, #72]	; (8008844 <HAL_PCD_MspInit+0xa4>)
 80087fc:	f7f9 fd40 	bl	8002280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008800:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 8008802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008804:	4a0e      	ldr	r2, [pc, #56]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 8008806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800880a:	6353      	str	r3, [r2, #52]	; 0x34
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 8008812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008814:	4a0a      	ldr	r2, [pc, #40]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 8008816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800881a:	6453      	str	r3, [r2, #68]	; 0x44
 800881c:	4b08      	ldr	r3, [pc, #32]	; (8008840 <HAL_PCD_MspInit+0xa0>)
 800881e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008824:	60fb      	str	r3, [r7, #12]
 8008826:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008828:	2200      	movs	r2, #0
 800882a:	2100      	movs	r1, #0
 800882c:	2043      	movs	r0, #67	; 0x43
 800882e:	f7f9 f980 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008832:	2043      	movs	r0, #67	; 0x43
 8008834:	f7f9 f999 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008838:	bf00      	nop
 800883a:	3728      	adds	r7, #40	; 0x28
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40023800 	.word	0x40023800
 8008844:	40020000 	.word	0x40020000

08008848 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f7fe fb59 	bl	8006f16 <USBD_LL_SetupStage>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	78fb      	ldrb	r3, [r7, #3]
 8008894:	4619      	mov	r1, r3
 8008896:	f7fe fb93 	bl	8006fc0 <USBD_LL_DataOutStage>
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	334c      	adds	r3, #76	; 0x4c
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	4619      	mov	r1, r3
 80088ca:	f7fe fc2c 	bl	8007126 <USBD_LL_DataInStage>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fd60 	bl	80073aa <USBD_LL_SOF>
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088fa:	2301      	movs	r3, #1
 80088fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d001      	beq.n	800890a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008906:	f7f8 f8b5 	bl	8000a74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008910:	7bfa      	ldrb	r2, [r7, #15]
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe fd0a 	bl	800732e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe fcb2 	bl	800728a <USBD_LL_Reset>
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fd05 	bl	800734e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6812      	ldr	r2, [r2, #0]
 8008952:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008956:	f043 0301 	orr.w	r3, r3, #1
 800895a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008964:	4b04      	ldr	r3, [pc, #16]	; (8008978 <HAL_PCD_SuspendCallback+0x48>)
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	4a03      	ldr	r2, [pc, #12]	; (8008978 <HAL_PCD_SuspendCallback+0x48>)
 800896a:	f043 0306 	orr.w	r3, r3, #6
 800896e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	e000ed00 	.word	0xe000ed00

0800897c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe fcf5 	bl	800737a <USBD_LL_Resume>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	4611      	mov	r1, r2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fd4d 	bl	800744e <USBD_LL_IsoOUTIncomplete>
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ce:	78fa      	ldrb	r2, [r7, #3]
 80089d0:	4611      	mov	r1, r2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe fd09 	bl	80073ea <USBD_LL_IsoINIncomplete>
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fd5f 	bl	80074b2 <USBD_LL_DevConnected>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fd5c 	bl	80074c8 <USBD_LL_DevDisconnected>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d13c      	bne.n	8008aa2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a28:	4a20      	ldr	r2, [pc, #128]	; (8008aac <USBD_LL_Init+0x94>)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a1e      	ldr	r2, [pc, #120]	; (8008aac <USBD_LL_Init+0x94>)
 8008a34:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a38:	4b1c      	ldr	r3, [pc, #112]	; (8008aac <USBD_LL_Init+0x94>)
 8008a3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a40:	4b1a      	ldr	r3, [pc, #104]	; (8008aac <USBD_LL_Init+0x94>)
 8008a42:	2204      	movs	r2, #4
 8008a44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a46:	4b19      	ldr	r3, [pc, #100]	; (8008aac <USBD_LL_Init+0x94>)
 8008a48:	2202      	movs	r2, #2
 8008a4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a4c:	4b17      	ldr	r3, [pc, #92]	; (8008aac <USBD_LL_Init+0x94>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a52:	4b16      	ldr	r3, [pc, #88]	; (8008aac <USBD_LL_Init+0x94>)
 8008a54:	2202      	movs	r2, #2
 8008a56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a58:	4b14      	ldr	r3, [pc, #80]	; (8008aac <USBD_LL_Init+0x94>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a5e:	4b13      	ldr	r3, [pc, #76]	; (8008aac <USBD_LL_Init+0x94>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a64:	4b11      	ldr	r3, [pc, #68]	; (8008aac <USBD_LL_Init+0x94>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a6a:	4b10      	ldr	r3, [pc, #64]	; (8008aac <USBD_LL_Init+0x94>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a70:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <USBD_LL_Init+0x94>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a76:	480d      	ldr	r0, [pc, #52]	; (8008aac <USBD_LL_Init+0x94>)
 8008a78:	f7f9 fd9e 	bl	80025b8 <HAL_PCD_Init>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a82:	f7f7 fff7 	bl	8000a74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a86:	2180      	movs	r1, #128	; 0x80
 8008a88:	4808      	ldr	r0, [pc, #32]	; (8008aac <USBD_LL_Init+0x94>)
 8008a8a:	f7fa fff6 	bl	8003a7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a8e:	2240      	movs	r2, #64	; 0x40
 8008a90:	2100      	movs	r1, #0
 8008a92:	4806      	ldr	r0, [pc, #24]	; (8008aac <USBD_LL_Init+0x94>)
 8008a94:	f7fa ffaa 	bl	80039ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a98:	2280      	movs	r2, #128	; 0x80
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	4803      	ldr	r0, [pc, #12]	; (8008aac <USBD_LL_Init+0x94>)
 8008a9e:	f7fa ffa5 	bl	80039ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	200017ac 	.word	0x200017ac

08008ab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7f9 fe93 	bl	80027f2 <HAL_PCD_Start>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 f942 	bl	8008d5c <USBD_Get_USB_Status>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	4608      	mov	r0, r1
 8008af0:	4611      	mov	r1, r2
 8008af2:	461a      	mov	r2, r3
 8008af4:	4603      	mov	r3, r0
 8008af6:	70fb      	strb	r3, [r7, #3]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70bb      	strb	r3, [r7, #2]
 8008afc:	4613      	mov	r3, r2
 8008afe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b0e:	78bb      	ldrb	r3, [r7, #2]
 8008b10:	883a      	ldrh	r2, [r7, #0]
 8008b12:	78f9      	ldrb	r1, [r7, #3]
 8008b14:	f7fa fb64 	bl	80031e0 <HAL_PCD_EP_Open>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 f91c 	bl	8008d5c <USBD_Get_USB_Status>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b4c:	78fa      	ldrb	r2, [r7, #3]
 8008b4e:	4611      	mov	r1, r2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fa fbad 	bl	80032b0 <HAL_PCD_EP_Close>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 f8fd 	bl	8008d5c <USBD_Get_USB_Status>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fa fc85 	bl	800349e <HAL_PCD_EP_SetStall>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f8de 	bl	8008d5c <USBD_Get_USB_Status>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bc8:	78fa      	ldrb	r2, [r7, #3]
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fa fcca 	bl	8003566 <HAL_PCD_EP_ClrStall>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 f8bf 	bl	8008d5c <USBD_Get_USB_Status>
 8008bde:	4603      	mov	r3, r0
 8008be0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da0b      	bge.n	8008c20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	4613      	mov	r3, r2
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	4413      	add	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	440b      	add	r3, r1
 8008c1a:	333e      	adds	r3, #62	; 0x3e
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	e00b      	b.n	8008c38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c26:	68f9      	ldr	r1, [r7, #12]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008c36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	4611      	mov	r1, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fa fa97 	bl	8003196 <HAL_PCD_SetAddress>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f874 	bl	8008d5c <USBD_Get_USB_Status>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b086      	sub	sp, #24
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ca0:	7af9      	ldrb	r1, [r7, #11]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	f7fa fbb0 	bl	800340a <HAL_PCD_EP_Transmit>
 8008caa:	4603      	mov	r3, r0
 8008cac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 f853 	bl	8008d5c <USBD_Get_USB_Status>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cba:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	607a      	str	r2, [r7, #4]
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ce2:	7af9      	ldrb	r1, [r7, #11]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	f7fa fb2c 	bl	8003344 <HAL_PCD_EP_Receive>
 8008cec:	4603      	mov	r3, r0
 8008cee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f832 	bl	8008d5c <USBD_Get_USB_Status>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d18:	78fa      	ldrb	r2, [r7, #3]
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fa fb5c 	bl	80033da <HAL_PCD_EP_GetRxCount>
 8008d22:	4603      	mov	r3, r0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d34:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <USBD_static_malloc+0x18>)
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	20001cb8 	.word	0x20001cb8

08008d48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]

}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d817      	bhi.n	8008da0 <USBD_Get_USB_Status+0x44>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <USBD_Get_USB_Status+0x1c>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008d89 	.word	0x08008d89
 8008d7c:	08008d8f 	.word	0x08008d8f
 8008d80:	08008d95 	.word	0x08008d95
 8008d84:	08008d9b 	.word	0x08008d9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8c:	e00b      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	73fb      	strb	r3, [r7, #15]
    break;
 8008d92:	e008      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e005      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	e002      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008da0:	2303      	movs	r3, #3
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	bf00      	nop
  }
  return usb_status;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <__errno>:
 8008db4:	4b01      	ldr	r3, [pc, #4]	; (8008dbc <__errno+0x8>)
 8008db6:	6818      	ldr	r0, [r3, #0]
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	200000fc 	.word	0x200000fc

08008dc0 <__libc_init_array>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	4d0d      	ldr	r5, [pc, #52]	; (8008df8 <__libc_init_array+0x38>)
 8008dc4:	4c0d      	ldr	r4, [pc, #52]	; (8008dfc <__libc_init_array+0x3c>)
 8008dc6:	1b64      	subs	r4, r4, r5
 8008dc8:	10a4      	asrs	r4, r4, #2
 8008dca:	2600      	movs	r6, #0
 8008dcc:	42a6      	cmp	r6, r4
 8008dce:	d109      	bne.n	8008de4 <__libc_init_array+0x24>
 8008dd0:	4d0b      	ldr	r5, [pc, #44]	; (8008e00 <__libc_init_array+0x40>)
 8008dd2:	4c0c      	ldr	r4, [pc, #48]	; (8008e04 <__libc_init_array+0x44>)
 8008dd4:	f000 fc8e 	bl	80096f4 <_init>
 8008dd8:	1b64      	subs	r4, r4, r5
 8008dda:	10a4      	asrs	r4, r4, #2
 8008ddc:	2600      	movs	r6, #0
 8008dde:	42a6      	cmp	r6, r4
 8008de0:	d105      	bne.n	8008dee <__libc_init_array+0x2e>
 8008de2:	bd70      	pop	{r4, r5, r6, pc}
 8008de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de8:	4798      	blx	r3
 8008dea:	3601      	adds	r6, #1
 8008dec:	e7ee      	b.n	8008dcc <__libc_init_array+0xc>
 8008dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df2:	4798      	blx	r3
 8008df4:	3601      	adds	r6, #1
 8008df6:	e7f2      	b.n	8008dde <__libc_init_array+0x1e>
 8008df8:	080097cc 	.word	0x080097cc
 8008dfc:	080097cc 	.word	0x080097cc
 8008e00:	080097cc 	.word	0x080097cc
 8008e04:	080097d0 	.word	0x080097d0

08008e08 <memset>:
 8008e08:	4402      	add	r2, r0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d100      	bne.n	8008e12 <memset+0xa>
 8008e10:	4770      	bx	lr
 8008e12:	f803 1b01 	strb.w	r1, [r3], #1
 8008e16:	e7f9      	b.n	8008e0c <memset+0x4>

08008e18 <siprintf>:
 8008e18:	b40e      	push	{r1, r2, r3}
 8008e1a:	b500      	push	{lr}
 8008e1c:	b09c      	sub	sp, #112	; 0x70
 8008e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e20:	9002      	str	r0, [sp, #8]
 8008e22:	9006      	str	r0, [sp, #24]
 8008e24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e28:	4809      	ldr	r0, [pc, #36]	; (8008e50 <siprintf+0x38>)
 8008e2a:	9107      	str	r1, [sp, #28]
 8008e2c:	9104      	str	r1, [sp, #16]
 8008e2e:	4909      	ldr	r1, [pc, #36]	; (8008e54 <siprintf+0x3c>)
 8008e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e34:	9105      	str	r1, [sp, #20]
 8008e36:	6800      	ldr	r0, [r0, #0]
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	a902      	add	r1, sp, #8
 8008e3c:	f000 f868 	bl	8008f10 <_svfiprintf_r>
 8008e40:	9b02      	ldr	r3, [sp, #8]
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	b01c      	add	sp, #112	; 0x70
 8008e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e4c:	b003      	add	sp, #12
 8008e4e:	4770      	bx	lr
 8008e50:	200000fc 	.word	0x200000fc
 8008e54:	ffff0208 	.word	0xffff0208

08008e58 <__ssputs_r>:
 8008e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	688e      	ldr	r6, [r1, #8]
 8008e5e:	429e      	cmp	r6, r3
 8008e60:	4682      	mov	sl, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	4690      	mov	r8, r2
 8008e66:	461f      	mov	r7, r3
 8008e68:	d838      	bhi.n	8008edc <__ssputs_r+0x84>
 8008e6a:	898a      	ldrh	r2, [r1, #12]
 8008e6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e70:	d032      	beq.n	8008ed8 <__ssputs_r+0x80>
 8008e72:	6825      	ldr	r5, [r4, #0]
 8008e74:	6909      	ldr	r1, [r1, #16]
 8008e76:	eba5 0901 	sub.w	r9, r5, r1
 8008e7a:	6965      	ldr	r5, [r4, #20]
 8008e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e84:	3301      	adds	r3, #1
 8008e86:	444b      	add	r3, r9
 8008e88:	106d      	asrs	r5, r5, #1
 8008e8a:	429d      	cmp	r5, r3
 8008e8c:	bf38      	it	cc
 8008e8e:	461d      	movcc	r5, r3
 8008e90:	0553      	lsls	r3, r2, #21
 8008e92:	d531      	bpl.n	8008ef8 <__ssputs_r+0xa0>
 8008e94:	4629      	mov	r1, r5
 8008e96:	f000 fb63 	bl	8009560 <_malloc_r>
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	b950      	cbnz	r0, 8008eb4 <__ssputs_r+0x5c>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	f8ca 3000 	str.w	r3, [sl]
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eaa:	81a3      	strh	r3, [r4, #12]
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb4:	6921      	ldr	r1, [r4, #16]
 8008eb6:	464a      	mov	r2, r9
 8008eb8:	f000 fabe 	bl	8009438 <memcpy>
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec6:	81a3      	strh	r3, [r4, #12]
 8008ec8:	6126      	str	r6, [r4, #16]
 8008eca:	6165      	str	r5, [r4, #20]
 8008ecc:	444e      	add	r6, r9
 8008ece:	eba5 0509 	sub.w	r5, r5, r9
 8008ed2:	6026      	str	r6, [r4, #0]
 8008ed4:	60a5      	str	r5, [r4, #8]
 8008ed6:	463e      	mov	r6, r7
 8008ed8:	42be      	cmp	r6, r7
 8008eda:	d900      	bls.n	8008ede <__ssputs_r+0x86>
 8008edc:	463e      	mov	r6, r7
 8008ede:	6820      	ldr	r0, [r4, #0]
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	4641      	mov	r1, r8
 8008ee4:	f000 fab6 	bl	8009454 <memmove>
 8008ee8:	68a3      	ldr	r3, [r4, #8]
 8008eea:	1b9b      	subs	r3, r3, r6
 8008eec:	60a3      	str	r3, [r4, #8]
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	4433      	add	r3, r6
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e7db      	b.n	8008eb0 <__ssputs_r+0x58>
 8008ef8:	462a      	mov	r2, r5
 8008efa:	f000 fba5 	bl	8009648 <_realloc_r>
 8008efe:	4606      	mov	r6, r0
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d1e1      	bne.n	8008ec8 <__ssputs_r+0x70>
 8008f04:	6921      	ldr	r1, [r4, #16]
 8008f06:	4650      	mov	r0, sl
 8008f08:	f000 fabe 	bl	8009488 <_free_r>
 8008f0c:	e7c7      	b.n	8008e9e <__ssputs_r+0x46>
	...

08008f10 <_svfiprintf_r>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	4698      	mov	r8, r3
 8008f16:	898b      	ldrh	r3, [r1, #12]
 8008f18:	061b      	lsls	r3, r3, #24
 8008f1a:	b09d      	sub	sp, #116	; 0x74
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	460d      	mov	r5, r1
 8008f20:	4614      	mov	r4, r2
 8008f22:	d50e      	bpl.n	8008f42 <_svfiprintf_r+0x32>
 8008f24:	690b      	ldr	r3, [r1, #16]
 8008f26:	b963      	cbnz	r3, 8008f42 <_svfiprintf_r+0x32>
 8008f28:	2140      	movs	r1, #64	; 0x40
 8008f2a:	f000 fb19 	bl	8009560 <_malloc_r>
 8008f2e:	6028      	str	r0, [r5, #0]
 8008f30:	6128      	str	r0, [r5, #16]
 8008f32:	b920      	cbnz	r0, 8008f3e <_svfiprintf_r+0x2e>
 8008f34:	230c      	movs	r3, #12
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	e0d1      	b.n	80090e2 <_svfiprintf_r+0x1d2>
 8008f3e:	2340      	movs	r3, #64	; 0x40
 8008f40:	616b      	str	r3, [r5, #20]
 8008f42:	2300      	movs	r3, #0
 8008f44:	9309      	str	r3, [sp, #36]	; 0x24
 8008f46:	2320      	movs	r3, #32
 8008f48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f50:	2330      	movs	r3, #48	; 0x30
 8008f52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090fc <_svfiprintf_r+0x1ec>
 8008f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f5a:	f04f 0901 	mov.w	r9, #1
 8008f5e:	4623      	mov	r3, r4
 8008f60:	469a      	mov	sl, r3
 8008f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f66:	b10a      	cbz	r2, 8008f6c <_svfiprintf_r+0x5c>
 8008f68:	2a25      	cmp	r2, #37	; 0x25
 8008f6a:	d1f9      	bne.n	8008f60 <_svfiprintf_r+0x50>
 8008f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f70:	d00b      	beq.n	8008f8a <_svfiprintf_r+0x7a>
 8008f72:	465b      	mov	r3, fp
 8008f74:	4622      	mov	r2, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f7ff ff6d 	bl	8008e58 <__ssputs_r>
 8008f7e:	3001      	adds	r0, #1
 8008f80:	f000 80aa 	beq.w	80090d8 <_svfiprintf_r+0x1c8>
 8008f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f86:	445a      	add	r2, fp
 8008f88:	9209      	str	r2, [sp, #36]	; 0x24
 8008f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 80a2 	beq.w	80090d8 <_svfiprintf_r+0x1c8>
 8008f94:	2300      	movs	r3, #0
 8008f96:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f9e:	f10a 0a01 	add.w	sl, sl, #1
 8008fa2:	9304      	str	r3, [sp, #16]
 8008fa4:	9307      	str	r3, [sp, #28]
 8008fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008faa:	931a      	str	r3, [sp, #104]	; 0x68
 8008fac:	4654      	mov	r4, sl
 8008fae:	2205      	movs	r2, #5
 8008fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb4:	4851      	ldr	r0, [pc, #324]	; (80090fc <_svfiprintf_r+0x1ec>)
 8008fb6:	f7f7 f91b 	bl	80001f0 <memchr>
 8008fba:	9a04      	ldr	r2, [sp, #16]
 8008fbc:	b9d8      	cbnz	r0, 8008ff6 <_svfiprintf_r+0xe6>
 8008fbe:	06d0      	lsls	r0, r2, #27
 8008fc0:	bf44      	itt	mi
 8008fc2:	2320      	movmi	r3, #32
 8008fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc8:	0711      	lsls	r1, r2, #28
 8008fca:	bf44      	itt	mi
 8008fcc:	232b      	movmi	r3, #43	; 0x2b
 8008fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fd8:	d015      	beq.n	8009006 <_svfiprintf_r+0xf6>
 8008fda:	9a07      	ldr	r2, [sp, #28]
 8008fdc:	4654      	mov	r4, sl
 8008fde:	2000      	movs	r0, #0
 8008fe0:	f04f 0c0a 	mov.w	ip, #10
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fea:	3b30      	subs	r3, #48	; 0x30
 8008fec:	2b09      	cmp	r3, #9
 8008fee:	d94e      	bls.n	800908e <_svfiprintf_r+0x17e>
 8008ff0:	b1b0      	cbz	r0, 8009020 <_svfiprintf_r+0x110>
 8008ff2:	9207      	str	r2, [sp, #28]
 8008ff4:	e014      	b.n	8009020 <_svfiprintf_r+0x110>
 8008ff6:	eba0 0308 	sub.w	r3, r0, r8
 8008ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8008ffe:	4313      	orrs	r3, r2
 8009000:	9304      	str	r3, [sp, #16]
 8009002:	46a2      	mov	sl, r4
 8009004:	e7d2      	b.n	8008fac <_svfiprintf_r+0x9c>
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	1d19      	adds	r1, r3, #4
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	9103      	str	r1, [sp, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	bfbb      	ittet	lt
 8009012:	425b      	neglt	r3, r3
 8009014:	f042 0202 	orrlt.w	r2, r2, #2
 8009018:	9307      	strge	r3, [sp, #28]
 800901a:	9307      	strlt	r3, [sp, #28]
 800901c:	bfb8      	it	lt
 800901e:	9204      	strlt	r2, [sp, #16]
 8009020:	7823      	ldrb	r3, [r4, #0]
 8009022:	2b2e      	cmp	r3, #46	; 0x2e
 8009024:	d10c      	bne.n	8009040 <_svfiprintf_r+0x130>
 8009026:	7863      	ldrb	r3, [r4, #1]
 8009028:	2b2a      	cmp	r3, #42	; 0x2a
 800902a:	d135      	bne.n	8009098 <_svfiprintf_r+0x188>
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	1d1a      	adds	r2, r3, #4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	9203      	str	r2, [sp, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	bfb8      	it	lt
 8009038:	f04f 33ff 	movlt.w	r3, #4294967295
 800903c:	3402      	adds	r4, #2
 800903e:	9305      	str	r3, [sp, #20]
 8009040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800910c <_svfiprintf_r+0x1fc>
 8009044:	7821      	ldrb	r1, [r4, #0]
 8009046:	2203      	movs	r2, #3
 8009048:	4650      	mov	r0, sl
 800904a:	f7f7 f8d1 	bl	80001f0 <memchr>
 800904e:	b140      	cbz	r0, 8009062 <_svfiprintf_r+0x152>
 8009050:	2340      	movs	r3, #64	; 0x40
 8009052:	eba0 000a 	sub.w	r0, r0, sl
 8009056:	fa03 f000 	lsl.w	r0, r3, r0
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	4303      	orrs	r3, r0
 800905e:	3401      	adds	r4, #1
 8009060:	9304      	str	r3, [sp, #16]
 8009062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009066:	4826      	ldr	r0, [pc, #152]	; (8009100 <_svfiprintf_r+0x1f0>)
 8009068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800906c:	2206      	movs	r2, #6
 800906e:	f7f7 f8bf 	bl	80001f0 <memchr>
 8009072:	2800      	cmp	r0, #0
 8009074:	d038      	beq.n	80090e8 <_svfiprintf_r+0x1d8>
 8009076:	4b23      	ldr	r3, [pc, #140]	; (8009104 <_svfiprintf_r+0x1f4>)
 8009078:	bb1b      	cbnz	r3, 80090c2 <_svfiprintf_r+0x1b2>
 800907a:	9b03      	ldr	r3, [sp, #12]
 800907c:	3307      	adds	r3, #7
 800907e:	f023 0307 	bic.w	r3, r3, #7
 8009082:	3308      	adds	r3, #8
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009088:	4433      	add	r3, r6
 800908a:	9309      	str	r3, [sp, #36]	; 0x24
 800908c:	e767      	b.n	8008f5e <_svfiprintf_r+0x4e>
 800908e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009092:	460c      	mov	r4, r1
 8009094:	2001      	movs	r0, #1
 8009096:	e7a5      	b.n	8008fe4 <_svfiprintf_r+0xd4>
 8009098:	2300      	movs	r3, #0
 800909a:	3401      	adds	r4, #1
 800909c:	9305      	str	r3, [sp, #20]
 800909e:	4619      	mov	r1, r3
 80090a0:	f04f 0c0a 	mov.w	ip, #10
 80090a4:	4620      	mov	r0, r4
 80090a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090aa:	3a30      	subs	r2, #48	; 0x30
 80090ac:	2a09      	cmp	r2, #9
 80090ae:	d903      	bls.n	80090b8 <_svfiprintf_r+0x1a8>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0c5      	beq.n	8009040 <_svfiprintf_r+0x130>
 80090b4:	9105      	str	r1, [sp, #20]
 80090b6:	e7c3      	b.n	8009040 <_svfiprintf_r+0x130>
 80090b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80090bc:	4604      	mov	r4, r0
 80090be:	2301      	movs	r3, #1
 80090c0:	e7f0      	b.n	80090a4 <_svfiprintf_r+0x194>
 80090c2:	ab03      	add	r3, sp, #12
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	462a      	mov	r2, r5
 80090c8:	4b0f      	ldr	r3, [pc, #60]	; (8009108 <_svfiprintf_r+0x1f8>)
 80090ca:	a904      	add	r1, sp, #16
 80090cc:	4638      	mov	r0, r7
 80090ce:	f3af 8000 	nop.w
 80090d2:	1c42      	adds	r2, r0, #1
 80090d4:	4606      	mov	r6, r0
 80090d6:	d1d6      	bne.n	8009086 <_svfiprintf_r+0x176>
 80090d8:	89ab      	ldrh	r3, [r5, #12]
 80090da:	065b      	lsls	r3, r3, #25
 80090dc:	f53f af2c 	bmi.w	8008f38 <_svfiprintf_r+0x28>
 80090e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090e2:	b01d      	add	sp, #116	; 0x74
 80090e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e8:	ab03      	add	r3, sp, #12
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	462a      	mov	r2, r5
 80090ee:	4b06      	ldr	r3, [pc, #24]	; (8009108 <_svfiprintf_r+0x1f8>)
 80090f0:	a904      	add	r1, sp, #16
 80090f2:	4638      	mov	r0, r7
 80090f4:	f000 f87a 	bl	80091ec <_printf_i>
 80090f8:	e7eb      	b.n	80090d2 <_svfiprintf_r+0x1c2>
 80090fa:	bf00      	nop
 80090fc:	08009790 	.word	0x08009790
 8009100:	0800979a 	.word	0x0800979a
 8009104:	00000000 	.word	0x00000000
 8009108:	08008e59 	.word	0x08008e59
 800910c:	08009796 	.word	0x08009796

08009110 <_printf_common>:
 8009110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	4616      	mov	r6, r2
 8009116:	4699      	mov	r9, r3
 8009118:	688a      	ldr	r2, [r1, #8]
 800911a:	690b      	ldr	r3, [r1, #16]
 800911c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009120:	4293      	cmp	r3, r2
 8009122:	bfb8      	it	lt
 8009124:	4613      	movlt	r3, r2
 8009126:	6033      	str	r3, [r6, #0]
 8009128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800912c:	4607      	mov	r7, r0
 800912e:	460c      	mov	r4, r1
 8009130:	b10a      	cbz	r2, 8009136 <_printf_common+0x26>
 8009132:	3301      	adds	r3, #1
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	0699      	lsls	r1, r3, #26
 800913a:	bf42      	ittt	mi
 800913c:	6833      	ldrmi	r3, [r6, #0]
 800913e:	3302      	addmi	r3, #2
 8009140:	6033      	strmi	r3, [r6, #0]
 8009142:	6825      	ldr	r5, [r4, #0]
 8009144:	f015 0506 	ands.w	r5, r5, #6
 8009148:	d106      	bne.n	8009158 <_printf_common+0x48>
 800914a:	f104 0a19 	add.w	sl, r4, #25
 800914e:	68e3      	ldr	r3, [r4, #12]
 8009150:	6832      	ldr	r2, [r6, #0]
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	42ab      	cmp	r3, r5
 8009156:	dc26      	bgt.n	80091a6 <_printf_common+0x96>
 8009158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800915c:	1e13      	subs	r3, r2, #0
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	bf18      	it	ne
 8009162:	2301      	movne	r3, #1
 8009164:	0692      	lsls	r2, r2, #26
 8009166:	d42b      	bmi.n	80091c0 <_printf_common+0xb0>
 8009168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800916c:	4649      	mov	r1, r9
 800916e:	4638      	mov	r0, r7
 8009170:	47c0      	blx	r8
 8009172:	3001      	adds	r0, #1
 8009174:	d01e      	beq.n	80091b4 <_printf_common+0xa4>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	68e5      	ldr	r5, [r4, #12]
 800917a:	6832      	ldr	r2, [r6, #0]
 800917c:	f003 0306 	and.w	r3, r3, #6
 8009180:	2b04      	cmp	r3, #4
 8009182:	bf08      	it	eq
 8009184:	1aad      	subeq	r5, r5, r2
 8009186:	68a3      	ldr	r3, [r4, #8]
 8009188:	6922      	ldr	r2, [r4, #16]
 800918a:	bf0c      	ite	eq
 800918c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009190:	2500      	movne	r5, #0
 8009192:	4293      	cmp	r3, r2
 8009194:	bfc4      	itt	gt
 8009196:	1a9b      	subgt	r3, r3, r2
 8009198:	18ed      	addgt	r5, r5, r3
 800919a:	2600      	movs	r6, #0
 800919c:	341a      	adds	r4, #26
 800919e:	42b5      	cmp	r5, r6
 80091a0:	d11a      	bne.n	80091d8 <_printf_common+0xc8>
 80091a2:	2000      	movs	r0, #0
 80091a4:	e008      	b.n	80091b8 <_printf_common+0xa8>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4652      	mov	r2, sl
 80091aa:	4649      	mov	r1, r9
 80091ac:	4638      	mov	r0, r7
 80091ae:	47c0      	blx	r8
 80091b0:	3001      	adds	r0, #1
 80091b2:	d103      	bne.n	80091bc <_printf_common+0xac>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295
 80091b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091bc:	3501      	adds	r5, #1
 80091be:	e7c6      	b.n	800914e <_printf_common+0x3e>
 80091c0:	18e1      	adds	r1, r4, r3
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	2030      	movs	r0, #48	; 0x30
 80091c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ca:	4422      	add	r2, r4
 80091cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091d4:	3302      	adds	r3, #2
 80091d6:	e7c7      	b.n	8009168 <_printf_common+0x58>
 80091d8:	2301      	movs	r3, #1
 80091da:	4622      	mov	r2, r4
 80091dc:	4649      	mov	r1, r9
 80091de:	4638      	mov	r0, r7
 80091e0:	47c0      	blx	r8
 80091e2:	3001      	adds	r0, #1
 80091e4:	d0e6      	beq.n	80091b4 <_printf_common+0xa4>
 80091e6:	3601      	adds	r6, #1
 80091e8:	e7d9      	b.n	800919e <_printf_common+0x8e>
	...

080091ec <_printf_i>:
 80091ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f0:	7e0f      	ldrb	r7, [r1, #24]
 80091f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091f4:	2f78      	cmp	r7, #120	; 0x78
 80091f6:	4691      	mov	r9, r2
 80091f8:	4680      	mov	r8, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	469a      	mov	sl, r3
 80091fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009202:	d807      	bhi.n	8009214 <_printf_i+0x28>
 8009204:	2f62      	cmp	r7, #98	; 0x62
 8009206:	d80a      	bhi.n	800921e <_printf_i+0x32>
 8009208:	2f00      	cmp	r7, #0
 800920a:	f000 80d8 	beq.w	80093be <_printf_i+0x1d2>
 800920e:	2f58      	cmp	r7, #88	; 0x58
 8009210:	f000 80a3 	beq.w	800935a <_printf_i+0x16e>
 8009214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800921c:	e03a      	b.n	8009294 <_printf_i+0xa8>
 800921e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009222:	2b15      	cmp	r3, #21
 8009224:	d8f6      	bhi.n	8009214 <_printf_i+0x28>
 8009226:	a101      	add	r1, pc, #4	; (adr r1, 800922c <_printf_i+0x40>)
 8009228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800922c:	08009285 	.word	0x08009285
 8009230:	08009299 	.word	0x08009299
 8009234:	08009215 	.word	0x08009215
 8009238:	08009215 	.word	0x08009215
 800923c:	08009215 	.word	0x08009215
 8009240:	08009215 	.word	0x08009215
 8009244:	08009299 	.word	0x08009299
 8009248:	08009215 	.word	0x08009215
 800924c:	08009215 	.word	0x08009215
 8009250:	08009215 	.word	0x08009215
 8009254:	08009215 	.word	0x08009215
 8009258:	080093a5 	.word	0x080093a5
 800925c:	080092c9 	.word	0x080092c9
 8009260:	08009387 	.word	0x08009387
 8009264:	08009215 	.word	0x08009215
 8009268:	08009215 	.word	0x08009215
 800926c:	080093c7 	.word	0x080093c7
 8009270:	08009215 	.word	0x08009215
 8009274:	080092c9 	.word	0x080092c9
 8009278:	08009215 	.word	0x08009215
 800927c:	08009215 	.word	0x08009215
 8009280:	0800938f 	.word	0x0800938f
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	1d1a      	adds	r2, r3, #4
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	602a      	str	r2, [r5, #0]
 800928c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009294:	2301      	movs	r3, #1
 8009296:	e0a3      	b.n	80093e0 <_printf_i+0x1f4>
 8009298:	6820      	ldr	r0, [r4, #0]
 800929a:	6829      	ldr	r1, [r5, #0]
 800929c:	0606      	lsls	r6, r0, #24
 800929e:	f101 0304 	add.w	r3, r1, #4
 80092a2:	d50a      	bpl.n	80092ba <_printf_i+0xce>
 80092a4:	680e      	ldr	r6, [r1, #0]
 80092a6:	602b      	str	r3, [r5, #0]
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	da03      	bge.n	80092b4 <_printf_i+0xc8>
 80092ac:	232d      	movs	r3, #45	; 0x2d
 80092ae:	4276      	negs	r6, r6
 80092b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b4:	485e      	ldr	r0, [pc, #376]	; (8009430 <_printf_i+0x244>)
 80092b6:	230a      	movs	r3, #10
 80092b8:	e019      	b.n	80092ee <_printf_i+0x102>
 80092ba:	680e      	ldr	r6, [r1, #0]
 80092bc:	602b      	str	r3, [r5, #0]
 80092be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092c2:	bf18      	it	ne
 80092c4:	b236      	sxthne	r6, r6
 80092c6:	e7ef      	b.n	80092a8 <_printf_i+0xbc>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	6820      	ldr	r0, [r4, #0]
 80092cc:	1d19      	adds	r1, r3, #4
 80092ce:	6029      	str	r1, [r5, #0]
 80092d0:	0601      	lsls	r1, r0, #24
 80092d2:	d501      	bpl.n	80092d8 <_printf_i+0xec>
 80092d4:	681e      	ldr	r6, [r3, #0]
 80092d6:	e002      	b.n	80092de <_printf_i+0xf2>
 80092d8:	0646      	lsls	r6, r0, #25
 80092da:	d5fb      	bpl.n	80092d4 <_printf_i+0xe8>
 80092dc:	881e      	ldrh	r6, [r3, #0]
 80092de:	4854      	ldr	r0, [pc, #336]	; (8009430 <_printf_i+0x244>)
 80092e0:	2f6f      	cmp	r7, #111	; 0x6f
 80092e2:	bf0c      	ite	eq
 80092e4:	2308      	moveq	r3, #8
 80092e6:	230a      	movne	r3, #10
 80092e8:	2100      	movs	r1, #0
 80092ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ee:	6865      	ldr	r5, [r4, #4]
 80092f0:	60a5      	str	r5, [r4, #8]
 80092f2:	2d00      	cmp	r5, #0
 80092f4:	bfa2      	ittt	ge
 80092f6:	6821      	ldrge	r1, [r4, #0]
 80092f8:	f021 0104 	bicge.w	r1, r1, #4
 80092fc:	6021      	strge	r1, [r4, #0]
 80092fe:	b90e      	cbnz	r6, 8009304 <_printf_i+0x118>
 8009300:	2d00      	cmp	r5, #0
 8009302:	d04d      	beq.n	80093a0 <_printf_i+0x1b4>
 8009304:	4615      	mov	r5, r2
 8009306:	fbb6 f1f3 	udiv	r1, r6, r3
 800930a:	fb03 6711 	mls	r7, r3, r1, r6
 800930e:	5dc7      	ldrb	r7, [r0, r7]
 8009310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009314:	4637      	mov	r7, r6
 8009316:	42bb      	cmp	r3, r7
 8009318:	460e      	mov	r6, r1
 800931a:	d9f4      	bls.n	8009306 <_printf_i+0x11a>
 800931c:	2b08      	cmp	r3, #8
 800931e:	d10b      	bne.n	8009338 <_printf_i+0x14c>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	07de      	lsls	r6, r3, #31
 8009324:	d508      	bpl.n	8009338 <_printf_i+0x14c>
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	6861      	ldr	r1, [r4, #4]
 800932a:	4299      	cmp	r1, r3
 800932c:	bfde      	ittt	le
 800932e:	2330      	movle	r3, #48	; 0x30
 8009330:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009334:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009338:	1b52      	subs	r2, r2, r5
 800933a:	6122      	str	r2, [r4, #16]
 800933c:	f8cd a000 	str.w	sl, [sp]
 8009340:	464b      	mov	r3, r9
 8009342:	aa03      	add	r2, sp, #12
 8009344:	4621      	mov	r1, r4
 8009346:	4640      	mov	r0, r8
 8009348:	f7ff fee2 	bl	8009110 <_printf_common>
 800934c:	3001      	adds	r0, #1
 800934e:	d14c      	bne.n	80093ea <_printf_i+0x1fe>
 8009350:	f04f 30ff 	mov.w	r0, #4294967295
 8009354:	b004      	add	sp, #16
 8009356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935a:	4835      	ldr	r0, [pc, #212]	; (8009430 <_printf_i+0x244>)
 800935c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009360:	6829      	ldr	r1, [r5, #0]
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	f851 6b04 	ldr.w	r6, [r1], #4
 8009368:	6029      	str	r1, [r5, #0]
 800936a:	061d      	lsls	r5, r3, #24
 800936c:	d514      	bpl.n	8009398 <_printf_i+0x1ac>
 800936e:	07df      	lsls	r7, r3, #31
 8009370:	bf44      	itt	mi
 8009372:	f043 0320 	orrmi.w	r3, r3, #32
 8009376:	6023      	strmi	r3, [r4, #0]
 8009378:	b91e      	cbnz	r6, 8009382 <_printf_i+0x196>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f023 0320 	bic.w	r3, r3, #32
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	2310      	movs	r3, #16
 8009384:	e7b0      	b.n	80092e8 <_printf_i+0xfc>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	f043 0320 	orr.w	r3, r3, #32
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	2378      	movs	r3, #120	; 0x78
 8009390:	4828      	ldr	r0, [pc, #160]	; (8009434 <_printf_i+0x248>)
 8009392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009396:	e7e3      	b.n	8009360 <_printf_i+0x174>
 8009398:	0659      	lsls	r1, r3, #25
 800939a:	bf48      	it	mi
 800939c:	b2b6      	uxthmi	r6, r6
 800939e:	e7e6      	b.n	800936e <_printf_i+0x182>
 80093a0:	4615      	mov	r5, r2
 80093a2:	e7bb      	b.n	800931c <_printf_i+0x130>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	6826      	ldr	r6, [r4, #0]
 80093a8:	6961      	ldr	r1, [r4, #20]
 80093aa:	1d18      	adds	r0, r3, #4
 80093ac:	6028      	str	r0, [r5, #0]
 80093ae:	0635      	lsls	r5, r6, #24
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	d501      	bpl.n	80093b8 <_printf_i+0x1cc>
 80093b4:	6019      	str	r1, [r3, #0]
 80093b6:	e002      	b.n	80093be <_printf_i+0x1d2>
 80093b8:	0670      	lsls	r0, r6, #25
 80093ba:	d5fb      	bpl.n	80093b4 <_printf_i+0x1c8>
 80093bc:	8019      	strh	r1, [r3, #0]
 80093be:	2300      	movs	r3, #0
 80093c0:	6123      	str	r3, [r4, #16]
 80093c2:	4615      	mov	r5, r2
 80093c4:	e7ba      	b.n	800933c <_printf_i+0x150>
 80093c6:	682b      	ldr	r3, [r5, #0]
 80093c8:	1d1a      	adds	r2, r3, #4
 80093ca:	602a      	str	r2, [r5, #0]
 80093cc:	681d      	ldr	r5, [r3, #0]
 80093ce:	6862      	ldr	r2, [r4, #4]
 80093d0:	2100      	movs	r1, #0
 80093d2:	4628      	mov	r0, r5
 80093d4:	f7f6 ff0c 	bl	80001f0 <memchr>
 80093d8:	b108      	cbz	r0, 80093de <_printf_i+0x1f2>
 80093da:	1b40      	subs	r0, r0, r5
 80093dc:	6060      	str	r0, [r4, #4]
 80093de:	6863      	ldr	r3, [r4, #4]
 80093e0:	6123      	str	r3, [r4, #16]
 80093e2:	2300      	movs	r3, #0
 80093e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093e8:	e7a8      	b.n	800933c <_printf_i+0x150>
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	462a      	mov	r2, r5
 80093ee:	4649      	mov	r1, r9
 80093f0:	4640      	mov	r0, r8
 80093f2:	47d0      	blx	sl
 80093f4:	3001      	adds	r0, #1
 80093f6:	d0ab      	beq.n	8009350 <_printf_i+0x164>
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	079b      	lsls	r3, r3, #30
 80093fc:	d413      	bmi.n	8009426 <_printf_i+0x23a>
 80093fe:	68e0      	ldr	r0, [r4, #12]
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	4298      	cmp	r0, r3
 8009404:	bfb8      	it	lt
 8009406:	4618      	movlt	r0, r3
 8009408:	e7a4      	b.n	8009354 <_printf_i+0x168>
 800940a:	2301      	movs	r3, #1
 800940c:	4632      	mov	r2, r6
 800940e:	4649      	mov	r1, r9
 8009410:	4640      	mov	r0, r8
 8009412:	47d0      	blx	sl
 8009414:	3001      	adds	r0, #1
 8009416:	d09b      	beq.n	8009350 <_printf_i+0x164>
 8009418:	3501      	adds	r5, #1
 800941a:	68e3      	ldr	r3, [r4, #12]
 800941c:	9903      	ldr	r1, [sp, #12]
 800941e:	1a5b      	subs	r3, r3, r1
 8009420:	42ab      	cmp	r3, r5
 8009422:	dcf2      	bgt.n	800940a <_printf_i+0x21e>
 8009424:	e7eb      	b.n	80093fe <_printf_i+0x212>
 8009426:	2500      	movs	r5, #0
 8009428:	f104 0619 	add.w	r6, r4, #25
 800942c:	e7f5      	b.n	800941a <_printf_i+0x22e>
 800942e:	bf00      	nop
 8009430:	080097a1 	.word	0x080097a1
 8009434:	080097b2 	.word	0x080097b2

08009438 <memcpy>:
 8009438:	440a      	add	r2, r1
 800943a:	4291      	cmp	r1, r2
 800943c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009440:	d100      	bne.n	8009444 <memcpy+0xc>
 8009442:	4770      	bx	lr
 8009444:	b510      	push	{r4, lr}
 8009446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800944a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800944e:	4291      	cmp	r1, r2
 8009450:	d1f9      	bne.n	8009446 <memcpy+0xe>
 8009452:	bd10      	pop	{r4, pc}

08009454 <memmove>:
 8009454:	4288      	cmp	r0, r1
 8009456:	b510      	push	{r4, lr}
 8009458:	eb01 0402 	add.w	r4, r1, r2
 800945c:	d902      	bls.n	8009464 <memmove+0x10>
 800945e:	4284      	cmp	r4, r0
 8009460:	4623      	mov	r3, r4
 8009462:	d807      	bhi.n	8009474 <memmove+0x20>
 8009464:	1e43      	subs	r3, r0, #1
 8009466:	42a1      	cmp	r1, r4
 8009468:	d008      	beq.n	800947c <memmove+0x28>
 800946a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800946e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009472:	e7f8      	b.n	8009466 <memmove+0x12>
 8009474:	4402      	add	r2, r0
 8009476:	4601      	mov	r1, r0
 8009478:	428a      	cmp	r2, r1
 800947a:	d100      	bne.n	800947e <memmove+0x2a>
 800947c:	bd10      	pop	{r4, pc}
 800947e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009486:	e7f7      	b.n	8009478 <memmove+0x24>

08009488 <_free_r>:
 8009488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800948a:	2900      	cmp	r1, #0
 800948c:	d044      	beq.n	8009518 <_free_r+0x90>
 800948e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009492:	9001      	str	r0, [sp, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	f1a1 0404 	sub.w	r4, r1, #4
 800949a:	bfb8      	it	lt
 800949c:	18e4      	addlt	r4, r4, r3
 800949e:	f000 f913 	bl	80096c8 <__malloc_lock>
 80094a2:	4a1e      	ldr	r2, [pc, #120]	; (800951c <_free_r+0x94>)
 80094a4:	9801      	ldr	r0, [sp, #4]
 80094a6:	6813      	ldr	r3, [r2, #0]
 80094a8:	b933      	cbnz	r3, 80094b8 <_free_r+0x30>
 80094aa:	6063      	str	r3, [r4, #4]
 80094ac:	6014      	str	r4, [r2, #0]
 80094ae:	b003      	add	sp, #12
 80094b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094b4:	f000 b90e 	b.w	80096d4 <__malloc_unlock>
 80094b8:	42a3      	cmp	r3, r4
 80094ba:	d908      	bls.n	80094ce <_free_r+0x46>
 80094bc:	6825      	ldr	r5, [r4, #0]
 80094be:	1961      	adds	r1, r4, r5
 80094c0:	428b      	cmp	r3, r1
 80094c2:	bf01      	itttt	eq
 80094c4:	6819      	ldreq	r1, [r3, #0]
 80094c6:	685b      	ldreq	r3, [r3, #4]
 80094c8:	1949      	addeq	r1, r1, r5
 80094ca:	6021      	streq	r1, [r4, #0]
 80094cc:	e7ed      	b.n	80094aa <_free_r+0x22>
 80094ce:	461a      	mov	r2, r3
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	b10b      	cbz	r3, 80094d8 <_free_r+0x50>
 80094d4:	42a3      	cmp	r3, r4
 80094d6:	d9fa      	bls.n	80094ce <_free_r+0x46>
 80094d8:	6811      	ldr	r1, [r2, #0]
 80094da:	1855      	adds	r5, r2, r1
 80094dc:	42a5      	cmp	r5, r4
 80094de:	d10b      	bne.n	80094f8 <_free_r+0x70>
 80094e0:	6824      	ldr	r4, [r4, #0]
 80094e2:	4421      	add	r1, r4
 80094e4:	1854      	adds	r4, r2, r1
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	6011      	str	r1, [r2, #0]
 80094ea:	d1e0      	bne.n	80094ae <_free_r+0x26>
 80094ec:	681c      	ldr	r4, [r3, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	6053      	str	r3, [r2, #4]
 80094f2:	4421      	add	r1, r4
 80094f4:	6011      	str	r1, [r2, #0]
 80094f6:	e7da      	b.n	80094ae <_free_r+0x26>
 80094f8:	d902      	bls.n	8009500 <_free_r+0x78>
 80094fa:	230c      	movs	r3, #12
 80094fc:	6003      	str	r3, [r0, #0]
 80094fe:	e7d6      	b.n	80094ae <_free_r+0x26>
 8009500:	6825      	ldr	r5, [r4, #0]
 8009502:	1961      	adds	r1, r4, r5
 8009504:	428b      	cmp	r3, r1
 8009506:	bf04      	itt	eq
 8009508:	6819      	ldreq	r1, [r3, #0]
 800950a:	685b      	ldreq	r3, [r3, #4]
 800950c:	6063      	str	r3, [r4, #4]
 800950e:	bf04      	itt	eq
 8009510:	1949      	addeq	r1, r1, r5
 8009512:	6021      	streq	r1, [r4, #0]
 8009514:	6054      	str	r4, [r2, #4]
 8009516:	e7ca      	b.n	80094ae <_free_r+0x26>
 8009518:	b003      	add	sp, #12
 800951a:	bd30      	pop	{r4, r5, pc}
 800951c:	20001ed8 	.word	0x20001ed8

08009520 <sbrk_aligned>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	4e0e      	ldr	r6, [pc, #56]	; (800955c <sbrk_aligned+0x3c>)
 8009524:	460c      	mov	r4, r1
 8009526:	6831      	ldr	r1, [r6, #0]
 8009528:	4605      	mov	r5, r0
 800952a:	b911      	cbnz	r1, 8009532 <sbrk_aligned+0x12>
 800952c:	f000 f8bc 	bl	80096a8 <_sbrk_r>
 8009530:	6030      	str	r0, [r6, #0]
 8009532:	4621      	mov	r1, r4
 8009534:	4628      	mov	r0, r5
 8009536:	f000 f8b7 	bl	80096a8 <_sbrk_r>
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	d00a      	beq.n	8009554 <sbrk_aligned+0x34>
 800953e:	1cc4      	adds	r4, r0, #3
 8009540:	f024 0403 	bic.w	r4, r4, #3
 8009544:	42a0      	cmp	r0, r4
 8009546:	d007      	beq.n	8009558 <sbrk_aligned+0x38>
 8009548:	1a21      	subs	r1, r4, r0
 800954a:	4628      	mov	r0, r5
 800954c:	f000 f8ac 	bl	80096a8 <_sbrk_r>
 8009550:	3001      	adds	r0, #1
 8009552:	d101      	bne.n	8009558 <sbrk_aligned+0x38>
 8009554:	f04f 34ff 	mov.w	r4, #4294967295
 8009558:	4620      	mov	r0, r4
 800955a:	bd70      	pop	{r4, r5, r6, pc}
 800955c:	20001edc 	.word	0x20001edc

08009560 <_malloc_r>:
 8009560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009564:	1ccd      	adds	r5, r1, #3
 8009566:	f025 0503 	bic.w	r5, r5, #3
 800956a:	3508      	adds	r5, #8
 800956c:	2d0c      	cmp	r5, #12
 800956e:	bf38      	it	cc
 8009570:	250c      	movcc	r5, #12
 8009572:	2d00      	cmp	r5, #0
 8009574:	4607      	mov	r7, r0
 8009576:	db01      	blt.n	800957c <_malloc_r+0x1c>
 8009578:	42a9      	cmp	r1, r5
 800957a:	d905      	bls.n	8009588 <_malloc_r+0x28>
 800957c:	230c      	movs	r3, #12
 800957e:	603b      	str	r3, [r7, #0]
 8009580:	2600      	movs	r6, #0
 8009582:	4630      	mov	r0, r6
 8009584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009588:	4e2e      	ldr	r6, [pc, #184]	; (8009644 <_malloc_r+0xe4>)
 800958a:	f000 f89d 	bl	80096c8 <__malloc_lock>
 800958e:	6833      	ldr	r3, [r6, #0]
 8009590:	461c      	mov	r4, r3
 8009592:	bb34      	cbnz	r4, 80095e2 <_malloc_r+0x82>
 8009594:	4629      	mov	r1, r5
 8009596:	4638      	mov	r0, r7
 8009598:	f7ff ffc2 	bl	8009520 <sbrk_aligned>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	4604      	mov	r4, r0
 80095a0:	d14d      	bne.n	800963e <_malloc_r+0xde>
 80095a2:	6834      	ldr	r4, [r6, #0]
 80095a4:	4626      	mov	r6, r4
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	d140      	bne.n	800962c <_malloc_r+0xcc>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	4631      	mov	r1, r6
 80095ae:	4638      	mov	r0, r7
 80095b0:	eb04 0803 	add.w	r8, r4, r3
 80095b4:	f000 f878 	bl	80096a8 <_sbrk_r>
 80095b8:	4580      	cmp	r8, r0
 80095ba:	d13a      	bne.n	8009632 <_malloc_r+0xd2>
 80095bc:	6821      	ldr	r1, [r4, #0]
 80095be:	3503      	adds	r5, #3
 80095c0:	1a6d      	subs	r5, r5, r1
 80095c2:	f025 0503 	bic.w	r5, r5, #3
 80095c6:	3508      	adds	r5, #8
 80095c8:	2d0c      	cmp	r5, #12
 80095ca:	bf38      	it	cc
 80095cc:	250c      	movcc	r5, #12
 80095ce:	4629      	mov	r1, r5
 80095d0:	4638      	mov	r0, r7
 80095d2:	f7ff ffa5 	bl	8009520 <sbrk_aligned>
 80095d6:	3001      	adds	r0, #1
 80095d8:	d02b      	beq.n	8009632 <_malloc_r+0xd2>
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	442b      	add	r3, r5
 80095de:	6023      	str	r3, [r4, #0]
 80095e0:	e00e      	b.n	8009600 <_malloc_r+0xa0>
 80095e2:	6822      	ldr	r2, [r4, #0]
 80095e4:	1b52      	subs	r2, r2, r5
 80095e6:	d41e      	bmi.n	8009626 <_malloc_r+0xc6>
 80095e8:	2a0b      	cmp	r2, #11
 80095ea:	d916      	bls.n	800961a <_malloc_r+0xba>
 80095ec:	1961      	adds	r1, r4, r5
 80095ee:	42a3      	cmp	r3, r4
 80095f0:	6025      	str	r5, [r4, #0]
 80095f2:	bf18      	it	ne
 80095f4:	6059      	strne	r1, [r3, #4]
 80095f6:	6863      	ldr	r3, [r4, #4]
 80095f8:	bf08      	it	eq
 80095fa:	6031      	streq	r1, [r6, #0]
 80095fc:	5162      	str	r2, [r4, r5]
 80095fe:	604b      	str	r3, [r1, #4]
 8009600:	4638      	mov	r0, r7
 8009602:	f104 060b 	add.w	r6, r4, #11
 8009606:	f000 f865 	bl	80096d4 <__malloc_unlock>
 800960a:	f026 0607 	bic.w	r6, r6, #7
 800960e:	1d23      	adds	r3, r4, #4
 8009610:	1af2      	subs	r2, r6, r3
 8009612:	d0b6      	beq.n	8009582 <_malloc_r+0x22>
 8009614:	1b9b      	subs	r3, r3, r6
 8009616:	50a3      	str	r3, [r4, r2]
 8009618:	e7b3      	b.n	8009582 <_malloc_r+0x22>
 800961a:	6862      	ldr	r2, [r4, #4]
 800961c:	42a3      	cmp	r3, r4
 800961e:	bf0c      	ite	eq
 8009620:	6032      	streq	r2, [r6, #0]
 8009622:	605a      	strne	r2, [r3, #4]
 8009624:	e7ec      	b.n	8009600 <_malloc_r+0xa0>
 8009626:	4623      	mov	r3, r4
 8009628:	6864      	ldr	r4, [r4, #4]
 800962a:	e7b2      	b.n	8009592 <_malloc_r+0x32>
 800962c:	4634      	mov	r4, r6
 800962e:	6876      	ldr	r6, [r6, #4]
 8009630:	e7b9      	b.n	80095a6 <_malloc_r+0x46>
 8009632:	230c      	movs	r3, #12
 8009634:	603b      	str	r3, [r7, #0]
 8009636:	4638      	mov	r0, r7
 8009638:	f000 f84c 	bl	80096d4 <__malloc_unlock>
 800963c:	e7a1      	b.n	8009582 <_malloc_r+0x22>
 800963e:	6025      	str	r5, [r4, #0]
 8009640:	e7de      	b.n	8009600 <_malloc_r+0xa0>
 8009642:	bf00      	nop
 8009644:	20001ed8 	.word	0x20001ed8

08009648 <_realloc_r>:
 8009648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964c:	4680      	mov	r8, r0
 800964e:	4614      	mov	r4, r2
 8009650:	460e      	mov	r6, r1
 8009652:	b921      	cbnz	r1, 800965e <_realloc_r+0x16>
 8009654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009658:	4611      	mov	r1, r2
 800965a:	f7ff bf81 	b.w	8009560 <_malloc_r>
 800965e:	b92a      	cbnz	r2, 800966c <_realloc_r+0x24>
 8009660:	f7ff ff12 	bl	8009488 <_free_r>
 8009664:	4625      	mov	r5, r4
 8009666:	4628      	mov	r0, r5
 8009668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800966c:	f000 f838 	bl	80096e0 <_malloc_usable_size_r>
 8009670:	4284      	cmp	r4, r0
 8009672:	4607      	mov	r7, r0
 8009674:	d802      	bhi.n	800967c <_realloc_r+0x34>
 8009676:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800967a:	d812      	bhi.n	80096a2 <_realloc_r+0x5a>
 800967c:	4621      	mov	r1, r4
 800967e:	4640      	mov	r0, r8
 8009680:	f7ff ff6e 	bl	8009560 <_malloc_r>
 8009684:	4605      	mov	r5, r0
 8009686:	2800      	cmp	r0, #0
 8009688:	d0ed      	beq.n	8009666 <_realloc_r+0x1e>
 800968a:	42bc      	cmp	r4, r7
 800968c:	4622      	mov	r2, r4
 800968e:	4631      	mov	r1, r6
 8009690:	bf28      	it	cs
 8009692:	463a      	movcs	r2, r7
 8009694:	f7ff fed0 	bl	8009438 <memcpy>
 8009698:	4631      	mov	r1, r6
 800969a:	4640      	mov	r0, r8
 800969c:	f7ff fef4 	bl	8009488 <_free_r>
 80096a0:	e7e1      	b.n	8009666 <_realloc_r+0x1e>
 80096a2:	4635      	mov	r5, r6
 80096a4:	e7df      	b.n	8009666 <_realloc_r+0x1e>
	...

080096a8 <_sbrk_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4d06      	ldr	r5, [pc, #24]	; (80096c4 <_sbrk_r+0x1c>)
 80096ac:	2300      	movs	r3, #0
 80096ae:	4604      	mov	r4, r0
 80096b0:	4608      	mov	r0, r1
 80096b2:	602b      	str	r3, [r5, #0]
 80096b4:	f7f7 fb3e 	bl	8000d34 <_sbrk>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d102      	bne.n	80096c2 <_sbrk_r+0x1a>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	b103      	cbz	r3, 80096c2 <_sbrk_r+0x1a>
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	20001ee0 	.word	0x20001ee0

080096c8 <__malloc_lock>:
 80096c8:	4801      	ldr	r0, [pc, #4]	; (80096d0 <__malloc_lock+0x8>)
 80096ca:	f000 b811 	b.w	80096f0 <__retarget_lock_acquire_recursive>
 80096ce:	bf00      	nop
 80096d0:	20001ee4 	.word	0x20001ee4

080096d4 <__malloc_unlock>:
 80096d4:	4801      	ldr	r0, [pc, #4]	; (80096dc <__malloc_unlock+0x8>)
 80096d6:	f000 b80c 	b.w	80096f2 <__retarget_lock_release_recursive>
 80096da:	bf00      	nop
 80096dc:	20001ee4 	.word	0x20001ee4

080096e0 <_malloc_usable_size_r>:
 80096e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e4:	1f18      	subs	r0, r3, #4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfbc      	itt	lt
 80096ea:	580b      	ldrlt	r3, [r1, r0]
 80096ec:	18c0      	addlt	r0, r0, r3
 80096ee:	4770      	bx	lr

080096f0 <__retarget_lock_acquire_recursive>:
 80096f0:	4770      	bx	lr

080096f2 <__retarget_lock_release_recursive>:
 80096f2:	4770      	bx	lr

080096f4 <_init>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr

08009700 <_fini>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr
